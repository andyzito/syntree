{
  "docs": [
    {
      "comment": "/**\n * @class\n * @classdesc Represents a (usually undo-able) discrete user event.\n */",
      "meta": {
        "range": [
          86,
          499
        ],
        "filename": "action.js",
        "lineno": 5,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100000002",
          "name": "Syntree.Action",
          "type": "FunctionExpression",
          "paramnames": [
            "type",
            "data"
          ]
        },
        "vars": {
          "type": "Syntree.Action~type",
          "data": "Syntree.Action~data",
          "this.id": "Syntree.Action#id",
          "this.type": "Syntree.Action#type",
          "this.toString": "Syntree.Action#toString",
          "": null,
          "a": "Syntree.Action~a"
        }
      },
      "kind": "class",
      "classdesc": "Represents a (usually undo-able) discrete user event.",
      "name": "Action",
      "longname": "Syntree.Action",
      "memberof": "Syntree",
      "scope": "static",
      "___id": "T000002R000002",
      "___s": true
    },
    {
      "comment": "/**\n * @class\n * @classdesc Represents a movement arrow.\n * @extends Syntree.Element\n * @extends Syntree.SelectableElement\n */",
      "meta": {
        "range": [
          512,
          925
        ],
        "filename": "arrow.js",
        "lineno": 26,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100000643",
          "name": "Syntree.Arrow",
          "type": "FunctionExpression",
          "paramnames": [
            "config_matrix"
          ]
        },
        "vars": {
          "this.id": "Syntree.Arrow#id",
          "this.toNode.toArrow": "Syntree.Arrow#toNode.toArrow",
          "this.fromNode.fromArrow": "Syntree.Arrow#fromNode.fromArrow"
        }
      },
      "kind": "class",
      "classdesc": "Represents a movement arrow.",
      "augments": [
        "Syntree.Element",
        "Syntree.SelectableElement"
      ],
      "name": "Arrow",
      "longname": "Syntree.Arrow",
      "memberof": "Syntree",
      "scope": "static",
      "___id": "T000002R000054",
      "___s": true
    },
    {
      "comment": "/**\n * @class\n * @classdesc Represents the line connecting two nodes.\n * @extends Syntree.Element\n * @extends Syntree.SelectableElement\n */",
      "meta": {
        "range": [
          140,
          545
        ],
        "filename": "branch.js",
        "lineno": 7,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100002504",
          "name": "Syntree.Branch",
          "type": "FunctionExpression",
          "paramnames": [
            "parent",
            "child"
          ]
        },
        "vars": {
          "parent": "Syntree.Branch~parent",
          "child": "Syntree.Branch~child",
          "child.parentBranch": "Syntree.Branch~child.parentBranch",
          "this.parent": "Syntree.Branch#parent",
          "this.child": "Syntree.Branch#child",
          "this.triangle": "Syntree.Branch#triangle"
        }
      },
      "kind": "class",
      "classdesc": "Represents the line connecting two nodes.",
      "augments": [
        "Syntree.Element",
        "Syntree.SelectableElement"
      ],
      "name": "Branch",
      "longname": "Syntree.Branch",
      "memberof": "Syntree",
      "scope": "static",
      "___id": "T000002R000226",
      "___s": true
    },
    {
      "comment": "/**\n * @constructor\n * @classdesc An element in Syntree is any object that has a graphical representation and is related to the data of the tree. For example, a Node is an element, but the toolbar is not. Elements are Syntree.Node, Syntree.Branch, and Syntree.Arrow.\n */",
      "meta": {
        "range": [
          271,
          1029
        ],
        "filename": "element.js",
        "lineno": 5,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003517",
          "name": "Syntree.Element",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.id": "Syntree.Element#id",
          "this.selectable": "Syntree.Element#selectable",
          "this.deleted": "Syntree.Element#deleted"
        }
      },
      "kind": "class",
      "classdesc": "An element in Syntree is any object that has a graphical representation and is related to the data of the tree. For example, a Node is an element, but the toolbar is not. Elements are Syntree.Node, Syntree.Branch, and Syntree.Arrow.",
      "name": "Element",
      "longname": "Syntree.Element",
      "memberof": "Syntree",
      "scope": "static",
      "___id": "T000002R000356",
      "___s": true
    },
    {
      "comment": "/**\n         * A session-unique id.\n         * @type {number}\n         */",
      "meta": {
        "range": [
          490,
          519
        ],
        "filename": "element.js",
        "lineno": 13,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003537",
          "name": "this.id",
          "type": "CallExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "A session-unique id.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "id",
      "longname": "Syntree.Element#id",
      "kind": "member",
      "memberof": "Syntree.Element",
      "scope": "instance",
      "___id": "T000002R000357",
      "___s": true
    },
    {
      "comment": "/**\n     * Whether or not this element is selectable.\n     * Selectable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n     *\n     * @see Syntree.Element#isSelectable\n     */",
      "meta": {
        "range": [
          722,
          745
        ],
        "filename": "element.js",
        "lineno": 22,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003548",
          "name": "this.selectable",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Whether or not this element is selectable.\nSelectable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.",
      "see": [
        "Syntree.Element#isSelectable"
      ],
      "name": "selectable",
      "longname": "Syntree.Element#selectable",
      "kind": "member",
      "memberof": "Syntree.Element",
      "scope": "instance",
      "___id": "T000002R000358",
      "___s": true
    },
    {
      "comment": "/**\n     * Whether or not this element has been deleted.\n     * Needed to avoid double deletion.\n     *\n     * @type {boolean}\n     */",
      "meta": {
        "range": [
          891,
          911
        ],
        "filename": "element.js",
        "lineno": 30,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003554",
          "name": "this.deleted",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Whether or not this element has been deleted.\nNeeded to avoid double deletion.",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "deleted",
      "longname": "Syntree.Element#deleted",
      "kind": "member",
      "memberof": "Syntree.Element",
      "scope": "instance",
      "___id": "T000002R000359",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property deleted.\n *\n * @returns {boolean} whether or not the element is deleted\n * @see Syntree.Element.deleted;\n */",
      "meta": {
        "range": [
          1221,
          1298
        ],
        "filename": "element.js",
        "lineno": 45,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003575",
          "name": "Syntree.Element.prototype.isDeleted",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property deleted.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "whether or not the element is deleted"
        }
      ],
      "see": [
        "Syntree.Element.deleted;"
      ],
      "name": "isDeleted",
      "longname": "Syntree.Element#isDeleted",
      "kind": "function",
      "memberof": "Syntree.Element",
      "scope": "instance",
      "___id": "T000002R000360",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property selectable.\n *\n * @returns {boolean} whether or not the element is selectable\n * @see Syntree.Element#selectable\n */",
      "meta": {
        "range": [
          1455,
          1538
        ],
        "filename": "element.js",
        "lineno": 55,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003590",
          "name": "Syntree.Element.prototype.isSelectable",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property selectable.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "whether or not the element is selectable"
        }
      ],
      "see": [
        "Syntree.Element#selectable"
      ],
      "name": "isSelectable",
      "longname": "Syntree.Element#isSelectable",
      "kind": "function",
      "memberof": "Syntree.Element",
      "scope": "instance",
      "___id": "T000002R000361",
      "___s": true
    },
    {
      "comment": "/**\n * Delete the element.\n * Removes graphical elements, deregisters from Syntree.Workspace.page, and sets deleted property to true.\n * Extend in sub-classes with '__delete()'.\n *\n * @see Syntree.Element#deleted\n * @see Syntree.Element#isDeleted\n */",
      "meta": {
        "range": [
          1831,
          2114
        ],
        "filename": "element.js",
        "lineno": 68,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003605",
          "name": "Syntree.Element.prototype.delete",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.deleted": "Syntree.Element#deleted"
        }
      },
      "description": "Delete the element.\nRemoves graphical elements, deregisters from Syntree.Workspace.page, and sets deleted property to true.\nExtend in sub-classes with '__delete()'.",
      "see": [
        "Syntree.Element#deleted",
        "Syntree.Element#isDeleted"
      ],
      "name": "delete",
      "longname": "Syntree.Element#delete",
      "kind": "function",
      "memberof": "Syntree.Element",
      "scope": "instance",
      "___id": "T000002R000362",
      "___s": true
    },
    {
      "comment": "/**\n * Update the elements graphical representation.\n * Mostly serves as a wrapper for Syntree.Graphic.update.\n * Extend in sub-classes with '__updateGraphics()'.\n *\n * @see Syntree.Graphic\n */",
      "meta": {
        "range": [
          2310,
          2505
        ],
        "filename": "element.js",
        "lineno": 87,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003662",
          "name": "Syntree.Element.prototype.updateGraphics",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Update the elements graphical representation.\nMostly serves as a wrapper for Syntree.Graphic.update.\nExtend in sub-classes with '__updateGraphics()'.",
      "see": [
        "Syntree.Graphic"
      ],
      "name": "updateGraphics",
      "longname": "Syntree.Element#updateGraphics",
      "kind": "function",
      "memberof": "Syntree.Element",
      "scope": "instance",
      "___id": "T000002R000364",
      "___s": true
    },
    {
      "comment": "/**\n * Whether or not this object is an element.\n * Elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n *\n * @returns {boolean}\n */",
      "meta": {
        "range": [
          2646,
          2715
        ],
        "filename": "element.js",
        "lineno": 100,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003698",
          "name": "Syntree.Element.prototype.isElement",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Whether or not this object is an element.\nElements are Syntree.Node, Syntree.Branch, Syntree.Arrow.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isElement",
      "longname": "Syntree.Element#isElement",
      "kind": "function",
      "memberof": "Syntree.Element",
      "scope": "instance",
      "___id": "T000002R000365",
      "___s": true
    },
    {
      "comment": "/**\n * Whether or not this element is deletable.\n * Deletable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n * Syntree.Branch should never be deletable directly by the user.\n * Branches should only be deleted automatically when their child node is deleted.\n *\n * @see Syntree.Node.__delete\n * @returns {boolean}\n */",
      "meta": {
        "range": [
          3045,
          3116
        ],
        "filename": "element.js",
        "lineno": 113,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003711",
          "name": "Syntree.Element.prototype.isDeletable",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Whether or not this element is deletable.\nDeletable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\nSyntree.Branch should never be deletable directly by the user.\nBranches should only be deleted automatically when their child node is deleted.",
      "see": [
        "Syntree.Node.__delete"
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isDeletable",
      "longname": "Syntree.Element#isDeletable",
      "kind": "function",
      "memberof": "Syntree.Element",
      "scope": "instance",
      "___id": "T000002R000366",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property id.\n * @returns {number} the id of the element\n * @see Syntree.Element.id\n */",
      "meta": {
        "range": [
          3234,
          3302
        ],
        "filename": "element.js",
        "lineno": 122,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003724",
          "name": "Syntree.Element.prototype.getId",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property id.",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "the id of the element"
        }
      ],
      "see": [
        "Syntree.Element.id"
      ],
      "name": "getId",
      "longname": "Syntree.Element#getId",
      "kind": "function",
      "memberof": "Syntree.Element",
      "scope": "instance",
      "___id": "T000002R000367",
      "___s": true
    },
    {
      "comment": "/**\n * @class\n * @classdesc Instantiated for each new [Element]{@link Syntree.Element}. Manages all graphical representation.\n */",
      "meta": {
        "range": [
          590,
          844
        ],
        "filename": "graphic.js",
        "lineno": 25,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003793",
          "name": "Syntree.Graphic",
          "type": "FunctionExpression",
          "paramnames": [
            "config_matrix"
          ]
        },
        "vars": {
          "this.elements": "Syntree.Graphic#elements"
        }
      },
      "kind": "class",
      "classdesc": "Instantiated for each new [Element]{@link Syntree.Element}. Manages all graphical representation.",
      "name": "Graphic",
      "longname": "Syntree.Graphic",
      "memberof": "Syntree",
      "scope": "static",
      "___id": "T000002R000382",
      "___s": true
    },
    {
      "comment": "/**\n     * Session-unique identifier.\n     *\n     * @type {number}\n     *\n     * @see Syntree.Lib.genId\n     *\n     * @memberof Syntree.Node\n     * @instance\n     */",
      "meta": {
        "range": [
          295,
          370
        ],
        "filename": "node.js",
        "lineno": 14,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100004367",
          "name": "id",
          "type": "ObjectExpression",
          "value": "{\"require\":\"number\",\"default_value\":\"#undefined\"}"
        }
      },
      "description": "Session-unique identifier.",
      "type": {
        "names": [
          "number"
        ]
      },
      "see": [
        "Syntree.Lib.genId"
      ],
      "memberof": "Syntree.Node",
      "scope": "instance",
      "name": "id",
      "longname": "Syntree.Node#id",
      "kind": "member",
      "overrides": "Syntree.SelectableElement#id",
      "___id": "T000002R000412",
      "___s": true
    },
    {
      "comment": "/**\n     * Starting x coordinate.\n     *\n     * @type {number}\n     *\n     * @memberof Syntree.Node\n     * @instance\n     */",
      "meta": {
        "range": [
          505,
          568
        ],
        "filename": "node.js",
        "lineno": 26,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100004373",
          "name": "x",
          "type": "ObjectExpression",
          "value": "{\"require\":\"number\",\"default_value\":0}"
        }
      },
      "description": "Starting x coordinate.",
      "type": {
        "names": [
          "number"
        ]
      },
      "memberof": "Syntree.Node",
      "scope": "instance",
      "name": "x",
      "longname": "Syntree.Node#x",
      "kind": "member",
      "___id": "T000002R000415",
      "___s": true
    },
    {
      "comment": "/**\n     * Starting y coordinate.\n     *\n     * @type {number}\n     *\n     * @memberof Syntree.Node\n     * @instance\n     */",
      "meta": {
        "range": [
          703,
          766
        ],
        "filename": "node.js",
        "lineno": 38,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100004379",
          "name": "y",
          "type": "ObjectExpression",
          "value": "{\"require\":\"number\",\"default_value\":0}"
        }
      },
      "description": "Starting y coordinate.",
      "type": {
        "names": [
          "number"
        ]
      },
      "memberof": "Syntree.Node",
      "scope": "instance",
      "name": "y",
      "longname": "Syntree.Node#y",
      "kind": "member",
      "___id": "T000002R000418",
      "___s": true
    },
    {
      "comment": "/**\n     * Label content.\n     *\n     * @type {string}\n     *\n     * @memberof Syntree.Node\n     * @instance\n     */",
      "meta": {
        "range": [
          893,
          968
        ],
        "filename": "node.js",
        "lineno": 50,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100004385",
          "name": "labelContent",
          "type": "ObjectExpression",
          "value": "{\"require\":\"string\",\"default_value\":\"\"}"
        }
      },
      "description": "Label content.",
      "type": {
        "names": [
          "string"
        ]
      },
      "memberof": "Syntree.Node",
      "scope": "instance",
      "name": "labelContent",
      "longname": "Syntree.Node#labelContent",
      "kind": "member",
      "___id": "T000002R000421",
      "___s": true
    },
    {
      "comment": "/**\n * @class\n * @classdesc Nodes are the meat of Syntree. They act like items in a linked list, containing references to their parents and children.\n * @extends Syntree.Element\n * @extends Syntree.SelectableElement\n */",
      "meta": {
        "range": [
          1193,
          2469
        ],
        "filename": "node.js",
        "lineno": 62,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100004392",
          "name": "Syntree.Node",
          "type": "FunctionExpression",
          "paramnames": [
            "config_matrix"
          ]
        },
        "vars": {
          "this.lastSyncedPosition": "Syntree.Node#lastSyncedPosition",
          "this.parent": "Syntree.Node#parent",
          "this.children": "Syntree.Node#children",
          "this.parentBranch": "Syntree.Node#parentBranch",
          "this.childBranches": "Syntree.Node#childBranches",
          "this.editing": "Syntree.Node#editing",
          "this.real": "Syntree.Node#real"
        }
      },
      "kind": "class",
      "classdesc": "Nodes are the meat of Syntree. They act like items in a linked list, containing references to their parents and children.",
      "augments": [
        "Syntree.Element",
        "Syntree.SelectableElement"
      ],
      "name": "Node",
      "longname": "Syntree.Node",
      "memberof": "Syntree",
      "scope": "static",
      "___id": "T000002R000424",
      "___s": true
    },
    {
      "comment": "/**\n     * The last position that was updated to the visual display.\n     *\n     * @type {object}\n     */",
      "meta": {
        "range": [
          1464,
          1499
        ],
        "filename": "node.js",
        "lineno": 71,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100004423",
          "name": "this.lastSyncedPosition",
          "type": "Identifier",
          "value": "undefined",
          "paramnames": []
        }
      },
      "description": "The last position that was updated to the visual display.",
      "type": {
        "names": [
          "object"
        ]
      },
      "name": "lastSyncedPosition",
      "longname": "Syntree.Node#lastSyncedPosition",
      "kind": "member",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "___id": "T000002R000425",
      "___s": true
    },
    {
      "comment": "/**\n     * This Node's parent Node.\n     *\n     * @type {Syntree.Node}\n     */",
      "meta": {
        "range": [
          1610,
          1633
        ],
        "filename": "node.js",
        "lineno": 79,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100004429",
          "name": "this.parent",
          "type": "Identifier",
          "value": "undefined",
          "paramnames": []
        }
      },
      "description": "This Node's parent Node.",
      "type": {
        "names": [
          "Syntree.Node"
        ]
      },
      "name": "parent",
      "longname": "Syntree.Node#parent",
      "kind": "member",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "___id": "T000002R000426",
      "___s": true
    },
    {
      "comment": "/**\n     * This Node's child Nodes.\n     *\n     * @type {Syntree.Node[]}\n     */",
      "meta": {
        "range": [
          1725,
          1743
        ],
        "filename": "node.js",
        "lineno": 86,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100004435",
          "name": "this.children",
          "type": "ArrayExpression",
          "value": "[]",
          "paramnames": []
        }
      },
      "description": "This Node's child Nodes.",
      "type": {
        "names": [
          "Array.<Syntree.Node>"
        ]
      },
      "name": "children",
      "longname": "Syntree.Node#children",
      "kind": "member",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "___id": "T000002R000427",
      "___s": true
    },
    {
      "comment": "/**\n     * Branch connecting to this Node's parent.\n     *\n     * @type {Syntree.Branch}\n     */",
      "meta": {
        "range": [
          1867,
          1896
        ],
        "filename": "node.js",
        "lineno": 94,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100004441",
          "name": "this.parentBranch",
          "type": "Identifier",
          "value": "undefined",
          "paramnames": []
        }
      },
      "description": "Branch connecting to this Node's parent.",
      "type": {
        "names": [
          "Syntree.Branch"
        ]
      },
      "name": "parentBranch",
      "longname": "Syntree.Node#parentBranch",
      "kind": "member",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "___id": "T000002R000428",
      "___s": true
    },
    {
      "comment": "/**\n     * Branches connecting to this Node's children.\n     *\n     * @type {Syntree.Branch[]}\n     */",
      "meta": {
        "range": [
          2010,
          2033
        ],
        "filename": "node.js",
        "lineno": 101,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100004447",
          "name": "this.childBranches",
          "type": "ArrayExpression",
          "value": "[]",
          "paramnames": []
        }
      },
      "description": "Branches connecting to this Node's children.",
      "type": {
        "names": [
          "Array.<Syntree.Branch>"
        ]
      },
      "name": "childBranches",
      "longname": "Syntree.Node#childBranches",
      "kind": "member",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "___id": "T000002R000429",
      "___s": true
    },
    {
      "comment": "/**\n     * Is this Node being edited?\n     *\n     * @type {Boolean}\n     */",
      "meta": {
        "range": [
          2134,
          2154
        ],
        "filename": "node.js",
        "lineno": 109,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100004453",
          "name": "this.editing",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Is this Node being edited?",
      "type": {
        "names": [
          "Boolean"
        ]
      },
      "name": "editing",
      "longname": "Syntree.Node#editing",
      "kind": "member",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "___id": "T000002R000430",
      "___s": true
    },
    {
      "comment": "/**\n     * Has this Node been saved at least once?\n     * Used so we can autodelete Nodes on reverse navigation.\n     *\n     * @type {Boolean}\n     */",
      "meta": {
        "range": [
          2316,
          2333
        ],
        "filename": "node.js",
        "lineno": 117,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100004459",
          "name": "this.real",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Has this Node been saved at least once?\nUsed so we can autodelete Nodes on reverse navigation.",
      "type": {
        "names": [
          "Boolean"
        ]
      },
      "name": "real",
      "longname": "Syntree.Node#real",
      "kind": "member",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "___id": "T000002R000431",
      "___s": true
    },
    {
      "comment": "/**\n     * This Node's cached label BBox.\n     *\n     * @type {object}\n     */",
      "meta": {
        "range": [
          2423,
          2438
        ],
        "filename": "node.js",
        "lineno": 124,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100004465",
          "name": "this._labelbbox",
          "type": "MemberExpression"
        }
      },
      "description": "This Node's cached label BBox.",
      "type": {
        "names": [
          "object"
        ]
      },
      "name": "_labelbbox",
      "longname": "Syntree.Node#_labelbbox",
      "kind": "member",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "___id": "T000002R000432",
      "___s": true
    },
    {
      "comment": "/**\n * Build needed graphical objects and compile them into a new instance of Graphic.\n *\n * @see Syntree.Graphic\n */",
      "meta": {
        "range": [
          2589,
          8906
        ],
        "filename": "node.js",
        "lineno": 134,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100004474",
          "name": "Syntree.Node.prototype.createGraphic",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "editorid": "Syntree.Node#createGraphic~editorid",
          "editor": "Syntree.Node#createGraphic~editor",
          "highlight": "Syntree.Node#createGraphic~highlight",
          "deleteButton": "Syntree.Node#createGraphic~deleteButton",
          "label": "Syntree.Node#createGraphic~label",
          "config_matrix": "Syntree.Node#createGraphic~config_matrix",
          "": null,
          "customDrag": "Syntree.Node#createGraphic~customDrag",
          "customStart": "Syntree.Node#createGraphic~customStart",
          "customEnd": "Syntree.Node#createGraphic~customEnd",
          "this.graphic": "Syntree.Node#graphic"
        }
      },
      "description": "Build needed graphical objects and compile them into a new instance of Graphic.",
      "see": [
        "Syntree.Graphic"
      ],
      "name": "createGraphic",
      "longname": "Syntree.Node#createGraphic",
      "kind": "function",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "___id": "T000002R000433",
      "___s": true
    },
    {
      "comment": "/**\n * @class\n * @classdesc An element that the user can click on and select. Selectable elements are Syntree.Node, Syntree.Branch, and Syntree.Arrow.\n * @extends Syntree.Element\n */",
      "meta": {
        "range": [
          183,
          645
        ],
        "filename": "selectableElement.js",
        "lineno": 6,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100006938",
          "name": "Syntree.SelectableElement",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.selectable": "Syntree.SelectableElement#selectable",
          "this.selected": "Syntree.SelectableElement#selected"
        }
      },
      "kind": "class",
      "classdesc": "An element that the user can click on and select. Selectable elements are Syntree.Node, Syntree.Branch, and Syntree.Arrow.",
      "augments": [
        "Syntree.Element"
      ],
      "name": "SelectableElement",
      "longname": "Syntree.SelectableElement",
      "memberof": "Syntree",
      "scope": "static",
      "___id": "T000002R000633",
      "___s": true
    },
    {
      "comment": "/**\n     * Whether or not this element is selected.\n     *\n     * @type {boolean}\n     * @see Syntree.SelectableElement#isSelected\n     * @see Syntree.SelectableElement#select\n     */",
      "meta": {
        "range": [
          621,
          642
        ],
        "filename": "selectableElement.js",
        "lineno": 18,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100006965",
          "name": "this.selected",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Whether or not this element is selected.",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "see": [
        "Syntree.SelectableElement#isSelected",
        "Syntree.SelectableElement#select"
      ],
      "name": "selected",
      "longname": "Syntree.SelectableElement#selected",
      "kind": "member",
      "memberof": "Syntree.SelectableElement",
      "scope": "instance",
      "___id": "T000002R000635",
      "___s": true
    },
    {
      "comment": "/**\n * Select the element.\n * Controls the appearance and behavior of <strong>this element only</strong>.\n * Deselecting previously selected element and other overarching management is handled by Syntree.Page.\n *\n * @see Syntree.SelectableElement#isSelected\n * @see Syntree.SelectableElement#selected\n * @see Syntree.Page\n */",
      "meta": {
        "range": [
          972,
          1217
        ],
        "filename": "selectableElement.js",
        "lineno": 29,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100006971",
          "name": "Syntree.SelectableElement.prototype.select",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.selected": "Syntree.SelectableElement#selected"
        }
      },
      "description": "Select the element.\nControls the appearance and behavior of <strong>this element only</strong>.\nDeselecting previously selected element and other overarching management is handled by Syntree.Page.",
      "see": [
        "Syntree.SelectableElement#isSelected",
        "Syntree.SelectableElement#selected",
        "Syntree.Page"
      ],
      "name": "select",
      "longname": "Syntree.SelectableElement#select",
      "kind": "function",
      "memberof": "Syntree.SelectableElement",
      "scope": "instance",
      "___id": "T000002R000636",
      "___s": true
    },
    {
      "comment": "/**\n * Deselect the element.\n * Controls the appearance and behavior of <strong>this element only</strong>.\n * Other overarching management is handled by Syntree.Page.\n *\n * @see Syntree.SelectableElement#isSelected\n * @see Syntree.SelectableElement#selected\n * @see Syntree.Page\n */",
      "meta": {
        "range": [
          1503,
          1755
        ],
        "filename": "selectableElement.js",
        "lineno": 47,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100007019",
          "name": "Syntree.SelectableElement.prototype.deselect",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.selected": "Syntree.SelectableElement#selected"
        }
      },
      "description": "Deselect the element.\nControls the appearance and behavior of <strong>this element only</strong>.\nOther overarching management is handled by Syntree.Page.",
      "see": [
        "Syntree.SelectableElement#isSelected",
        "Syntree.SelectableElement#selected",
        "Syntree.Page"
      ],
      "name": "deselect",
      "longname": "Syntree.SelectableElement#deselect",
      "kind": "function",
      "memberof": "Syntree.SelectableElement",
      "scope": "instance",
      "___id": "T000002R000638",
      "___s": true
    },
    {
      "comment": "/**\n * @class\n * @classdesc Acts as an intermediate controller between [Workspace]{@link Syntree.Workspace} and elements of the tree.\n */",
      "meta": {
        "range": [
          138,
          1102
        ],
        "filename": "page.js",
        "lineno": 5,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007068",
          "name": "Syntree.Page",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "wWidth": "Syntree.Page~wWidth",
          "wHeight": "Syntree.Page~wHeight",
          "this.background": "Syntree.Page#background",
          "this.group": "Syntree.Page#group",
          "this.allElements": "Syntree.Page#allElements",
          "this.selectedElement": "Syntree.Page#selectedElement"
        }
      },
      "kind": "class",
      "classdesc": "Acts as an intermediate controller between [Workspace]{@link Syntree.Workspace} and elements of the tree.",
      "name": "Page",
      "longname": "Syntree.Page",
      "memberof": "Syntree",
      "scope": "static",
      "___id": "T000002R000640",
      "___s": true
    },
    {
      "comment": "/**\n     * The <rect> which is the background of the page.\n     */",
      "meta": {
        "range": [
          328,
          453
        ],
        "filename": "page.js",
        "lineno": 12,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007093",
          "name": "this.background",
          "type": "CallExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "The <rect> which is the background of the page.",
      "name": "background",
      "longname": "Syntree.Page#background",
      "kind": "member",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000643",
      "___s": true
    },
    {
      "comment": "/**\n     * An SVG group of all elements on the page. Used for panning.\n     *\n     * @type {object}\n     *\n     * @see Syntree.Page#_enablePanning\n     */",
      "meta": {
        "range": [
          706,
          735
        ],
        "filename": "page.js",
        "lineno": 30,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007130",
          "name": "this.group",
          "type": "CallExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "An SVG group of all elements on the page. Used for panning.",
      "type": {
        "names": [
          "object"
        ]
      },
      "see": [
        "Syntree.Page#_enablePanning"
      ],
      "name": "group",
      "longname": "Syntree.Page#group",
      "kind": "member",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000646",
      "___s": true
    },
    {
      "comment": "/**\n     * All [Elements]{@link Syntree.Element} on the page, referenced by id.\n     *\n     * @type {object}\n     */",
      "meta": {
        "range": [
          863,
          884
        ],
        "filename": "page.js",
        "lineno": 37,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007141",
          "name": "this.allElements",
          "type": "ObjectExpression",
          "value": "{}",
          "paramnames": []
        }
      },
      "description": "All [Elements]{@link Syntree.Element} on the page, referenced by id.",
      "type": {
        "names": [
          "object"
        ]
      },
      "name": "allElements",
      "longname": "Syntree.Page#allElements",
      "kind": "member",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000647",
      "___s": true
    },
    {
      "comment": "/**\n     * The currently selected [SelectableElement]{@link Syntree.SelectableElement}.\n     *\n     * @type {Syntree.SelectableElement}\n     */",
      "meta": {
        "range": [
          1039,
          1071
        ],
        "filename": "page.js",
        "lineno": 44,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007147",
          "name": "this.selectedElement",
          "type": "Identifier",
          "value": "undefined",
          "paramnames": []
        }
      },
      "description": "The currently selected [SelectableElement]{@link Syntree.SelectableElement}.",
      "type": {
        "names": [
          "Syntree.SelectableElement"
        ]
      },
      "name": "selectedElement",
      "longname": "Syntree.Page#selectedElement",
      "kind": "member",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000648",
      "___s": true
    },
    {
      "comment": "/**\n * Get the panning transform matrix.\n *\n * @returns {object} - deltax, deltay, and the global transform matrix\n *\n * @see Syntree.Page#_enablePanning\n * @see Syntree.Page#pan\n */",
      "meta": {
        "range": [
          1287,
          1500
        ],
        "filename": "page.js",
        "lineno": 57,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007158",
          "name": "Syntree.Page.prototype.getTransform",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "t": "Syntree.Page#getTransform~t",
          "dx": "Syntree.Page#getTransform~dx",
          "dy": "Syntree.Page#getTransform~dy"
        }
      },
      "description": "Get the panning transform matrix.",
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "- deltax, deltay, and the global transform matrix"
        }
      ],
      "see": [
        "Syntree.Page#_enablePanning",
        "Syntree.Page#pan"
      ],
      "name": "getTransform",
      "longname": "Syntree.Page#getTransform",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000649",
      "___s": true
    },
    {
      "comment": "/**\n * Add an Element to the list of all elements.\n *\n * @param {Syntree.Element} element - the element to register\n *\n * @see Syntree.Page#allElements\n */",
      "meta": {
        "range": [
          1658,
          2084
        ],
        "filename": "page.js",
        "lineno": 75,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007200",
          "name": "Syntree.Page.prototype.register",
          "type": "FunctionExpression",
          "paramnames": [
            "element"
          ]
        },
        "vars": {
          "element": "Syntree.Page#register~element",
          "this.allElements[undefined]": "Syntree.Page#allElements[undefined]",
          "el": "Syntree.Page#register~el",
          "el_obj": "Syntree.Page#register~el_obj"
        }
      },
      "description": "Add an Element to the list of all elements.",
      "params": [
        {
          "type": {
            "names": [
              "Syntree.Element"
            ]
          },
          "description": "the element to register",
          "name": "element"
        }
      ],
      "see": [
        "Syntree.Page#allElements"
      ],
      "name": "register",
      "longname": "Syntree.Page#register",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000656",
      "___s": true
    },
    {
      "comment": "/**\n * Remove the specified Element from the list of all elements.\n *\n * @param {Syntree.Element} element - the element to deregister\n *\n * @see Syntree.Page#register\n */",
      "meta": {
        "range": [
          2257,
          2424
        ],
        "filename": "page.js",
        "lineno": 95,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007278",
          "name": "Syntree.Page.prototype.deregister",
          "type": "FunctionExpression",
          "paramnames": [
            "element"
          ]
        },
        "vars": {
          "element": "Syntree.Page#deregister~element"
        }
      },
      "description": "Remove the specified Element from the list of all elements.",
      "params": [
        {
          "type": {
            "names": [
              "Syntree.Element"
            ]
          },
          "description": "the element to deregister",
          "name": "element"
        }
      ],
      "see": [
        "Syntree.Page#register"
      ],
      "name": "deregister",
      "longname": "Syntree.Page#deregister",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000661",
      "___s": true
    },
    {
      "comment": "/**\n * Select the given Element. (And deselect the previous Element.)\n *\n * @param {Syntree.Element} element - the element to select\n *\n * @see Syntree.Page#selectedElement\n */",
      "meta": {
        "range": [
          2603,
          2958
        ],
        "filename": "page.js",
        "lineno": 107,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007313",
          "name": "Syntree.Page.prototype.select",
          "type": "FunctionExpression",
          "paramnames": [
            "element"
          ]
        },
        "vars": {
          "element": "Syntree.Page#select~element",
          "this.selectedElement": "Syntree.Page#selectedElement"
        }
      },
      "description": "Select the given Element. (And deselect the previous Element.)",
      "params": [
        {
          "type": {
            "names": [
              "Syntree.Element"
            ]
          },
          "description": "the element to select",
          "name": "element"
        }
      ],
      "see": [
        "Syntree.Page#selectedElement"
      ],
      "name": "select",
      "longname": "Syntree.Page#select",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000663",
      "___s": true
    },
    {
      "comment": "/**\n * Deselect the currently selected Element.\n *\n * @see Syntree.Page#select\n */",
      "meta": {
        "range": [
          3043,
          3270
        ],
        "filename": "page.js",
        "lineno": 127,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007376",
          "name": "Syntree.Page.prototype.deselect",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.selectedElement": "Syntree.Page#selectedElement"
        }
      },
      "description": "Deselect the currently selected Element.",
      "see": [
        "Syntree.Page#select"
      ],
      "name": "deselect",
      "longname": "Syntree.Page#deselect",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000667",
      "___s": true
    },
    {
      "comment": "/**\n * A wrapper function around Node.delete, allowing us to easily delete a whole subtree.\n *\n * @see Syntree.Element#delete\n */",
      "meta": {
        "range": [
          3402,
          4137
        ],
        "filename": "page.js",
        "lineno": 139,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007416",
          "name": "Syntree.Page.prototype.deleteTree",
          "type": "FunctionExpression",
          "paramnames": [
            "tree"
          ]
        },
        "vars": {
          "tree": "Syntree.Page#deleteTree~tree",
          "treestring": "Syntree.Page#deleteTree~treestring",
          "parent": "Syntree.Page#deleteTree~parent",
          "index": "Syntree.Page#deleteTree~index",
          "temptree": "Syntree.Page#deleteTree~temptree"
        }
      },
      "description": "A wrapper function around Node.delete, allowing us to easily delete a whole subtree.",
      "see": [
        "Syntree.Element#delete"
      ],
      "name": "deleteTree",
      "longname": "Syntree.Page#deleteTree",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000669",
      "___s": true
    },
    {
      "comment": "/**\n * Check if given Element is registered with Page.\n *\n * @param {Syntree.Element} element - the element to check\n *\n * @returns {boolean} - whether or not the element is registered\n */",
      "meta": {
        "range": [
          4328,
          4534
        ],
        "filename": "page.js",
        "lineno": 172,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007543",
          "name": "Syntree.Page.prototype.isRegistered",
          "type": "FunctionExpression",
          "paramnames": [
            "element"
          ]
        },
        "vars": {
          "element": "Syntree.Page#isRegistered~element"
        }
      },
      "description": "Check if given Element is registered with Page.",
      "params": [
        {
          "type": {
            "names": [
              "Syntree.Element"
            ]
          },
          "description": "the element to check",
          "name": "element"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "- whether or not the element is registered"
        }
      ],
      "name": "isRegistered",
      "longname": "Syntree.Page#isRegistered",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000682",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for Page.selectedElement.\n *\n * @see Syntree.Page#selectedElement\n */",
      "meta": {
        "range": [
          4631,
          4715
        ],
        "filename": "page.js",
        "lineno": 182,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007585",
          "name": "Syntree.Page.prototype.getSelected",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for Page.selectedElement.",
      "see": [
        "Syntree.Page#selectedElement"
      ],
      "name": "getSelected",
      "longname": "Syntree.Page#getSelected",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000684",
      "___s": true
    },
    {
      "comment": "/**\n * Get all Elements, filtered by given type.\n *\n * @param {string} type - a string representing the Element type to filter by\n *\n * @returns {object} - all matching Elements, referenced by id\n */",
      "meta": {
        "range": [
          4917,
          5221
        ],
        "filename": "page.js",
        "lineno": 193,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007600",
          "name": "Syntree.Page.prototype.getElementsByType",
          "type": "FunctionExpression",
          "paramnames": [
            "type"
          ]
        },
        "vars": {
          "type": "Syntree.Page#getElementsByType~type",
          "res": "Syntree.Page#getElementsByType~res",
          "res[undefined]": "Syntree.Page#getElementsByType~res.undefined]"
        }
      },
      "description": "Get all Elements, filtered by given type.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "a string representing the Element type to filter by",
          "name": "type"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "- all matching Elements, referenced by id"
        }
      ],
      "name": "getElementsByType",
      "longname": "Syntree.Page#getElementsByType",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000685",
      "___s": true
    },
    {
      "comment": "/**\n * Create a movement arrow from the selected [Node]{@link Syntree.Node} to the clicked [Node]{@link Syntree.Node}.\n *\n * @param {Syntree.Node} node - the node that was clicked\n *\n * @returns {Syntree.Arrow} - the new Arrow\n */",
      "meta": {
        "range": [
          5454,
          5718
        ],
        "filename": "page.js",
        "lineno": 212,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007659",
          "name": "Syntree.Page.prototype.createMovementArrow",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        },
        "vars": {
          "a": "Syntree.Page#createMovementArrow~a"
        }
      },
      "description": "Create a movement arrow from the selected [Node]{@link Syntree.Node} to the clicked [Node]{@link Syntree.Node}.",
      "params": [
        {
          "type": {
            "names": [
              "Syntree.Node"
            ]
          },
          "description": "the node that was clicked",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Syntree.Arrow"
            ]
          },
          "description": "- the new Arrow"
        }
      ],
      "name": "createMovementArrow",
      "longname": "Syntree.Page#createMovementArrow",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000689",
      "___s": true
    },
    {
      "comment": "/**\n * Add a tree to the page.\n * If you do not provide a parent [Node]{@link Syntree.Node}, the main tree will be replaced.\n *\n * @param {Syntree.Tree} [tree] - the Tree object to add.\n * @param {Syntree.Node} [parent] - the Node to which the root of the Tree will be added\n * @param {number} [index=0] - the index at which to add the root of Tree\n */",
      "meta": {
        "range": [
          6073,
          9706
        ],
        "filename": "page.js",
        "lineno": 230,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007701",
          "name": "Syntree.Page.prototype.addTree",
          "type": "FunctionExpression",
          "paramnames": [
            "tree",
            "parent",
            "index"
          ]
        },
        "vars": {
          "tree": "Syntree.Page#addTree~tree",
          "parent": "Syntree.Page#addTree~parent",
          "index": "Syntree.Page#addTree~index",
          "root": "Syntree.Page#addTree~root",
          "this.tree": "Syntree.Page#tree",
          "temp": "Syntree.Page#addTree~temp"
        }
      },
      "description": "Add a tree to the page.\nIf you do not provide a parent [Node]{@link Syntree.Node}, the main tree will be replaced.",
      "params": [
        {
          "type": {
            "names": [
              "Syntree.Tree"
            ]
          },
          "optional": true,
          "description": "the Tree object to add.",
          "name": "tree"
        },
        {
          "type": {
            "names": [
              "Syntree.Node"
            ]
          },
          "optional": true,
          "description": "the Node to which the root of the Tree will be added",
          "name": "parent"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "the index at which to add the root of Tree",
          "name": "index"
        }
      ],
      "name": "addTree",
      "longname": "Syntree.Page#addTree",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000693",
      "___s": true
    },
    {
      "comment": "/**\n * Create a [Tree]{@link Syntree.Tree} from a treestring, and then add it to the page.\n * If you do not provide a parent [Node]{@link Syntree.Node}, the main tree will be replaced.\n *\n * @param {Syntree.Tree} treestring - the treestring which the Tree will build from\n * @param {Syntree.Node} [parent] - the Node to which the root of the Tree will be added\n * @param {number} [index=0] - the index at which to add the root of Tree\n */",
      "meta": {
        "range": [
          10147,
          10522
        ],
        "filename": "page.js",
        "lineno": 273,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007879",
          "name": "Syntree.Page.prototype.openTree",
          "type": "FunctionExpression",
          "paramnames": [
            "treestring",
            "parent",
            "index"
          ]
        },
        "vars": {
          "treestring": "Syntree.Page#openTree~treestring",
          "parent": "Syntree.Page#openTree~parent",
          "index": "Syntree.Page#openTree~index",
          "newTree": "Syntree.Page#openTree~newTree"
        }
      },
      "description": "Create a [Tree]{@link Syntree.Tree} from a treestring, and then add it to the page.\nIf you do not provide a parent [Node]{@link Syntree.Node}, the main tree will be replaced.",
      "params": [
        {
          "type": {
            "names": [
              "Syntree.Tree"
            ]
          },
          "description": "the treestring which the Tree will build from",
          "name": "treestring"
        },
        {
          "type": {
            "names": [
              "Syntree.Node"
            ]
          },
          "optional": true,
          "description": "the Node to which the root of the Tree will be added",
          "name": "parent"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "the index at which to add the root of Tree",
          "name": "index"
        }
      ],
      "name": "openTree",
      "longname": "Syntree.Page#openTree",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000707",
      "___s": true
    },
    {
      "comment": "/**\n * Get a string of SVG markup representing all marked objects on the page.\n *\n * @returns {string} - the SVG string\n */",
      "meta": {
        "range": [
          10648,
          11178
        ],
        "filename": "page.js",
        "lineno": 289,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100007946",
          "name": "Syntree.Page.prototype.getSVGString",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "selected": "Syntree.Page#getSVGString~selected",
          "bgsvg": "Syntree.Page#getSVGString~bgsvg",
          "elementssvg": "Syntree.Page#getSVGString~elementssvg",
          "elements": "Syntree.Page#getSVGString~elements",
          "style": "Syntree.Page#getSVGString~style",
          "marker": "Syntree.Page#getSVGString~marker"
        }
      },
      "description": "Get a string of SVG markup representing all marked objects on the page.",
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "- the SVG string"
        }
      ],
      "name": "getSVGString",
      "longname": "Syntree.Page#getSVGString",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000713",
      "___s": true
    },
    {
      "comment": "/**\n * Get the Node nearest to the given coordinates or Element.\n *\n * @param {number|Syntree.Element} a - x coordinate or Element to search from\n * @param {number} [b] - if a is a an x coordinate, the corresponding y coordinate\n * @param {function} [condition] - function that must return true for a Node to be considered in the search\n *\n * @returns {object|boolean} - data object on success, false on failure\n */",
      "meta": {
        "range": [
          11596,
          12905
        ],
        "filename": "page.js",
        "lineno": 313,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100008032",
          "name": "Syntree.Page.prototype.getNearestNode",
          "type": "FunctionExpression",
          "paramnames": [
            "a",
            "b",
            "condition"
          ]
        },
        "vars": {
          "condition": "Syntree.Page#getNearestNode~condition",
          "": null,
          "x": "Syntree.Page#getNearestNode~x",
          "y": "Syntree.Page#getNearestNode~y",
          "a": "Syntree.Page#getNearestNode~a",
          "ignoreNode": "Syntree.Page#getNearestNode~ignoreNode",
          "allNodes": "Syntree.Page#getNearestNode~allNodes",
          "nearestNode": "Syntree.Page#getNearestNode~nearestNode",
          "leastDist": "Syntree.Page#getNearestNode~leastDist",
          "node": "Syntree.Page#getNearestNode~node",
          "pos": "Syntree.Page#getNearestNode~pos",
          "distance": "Syntree.Page#getNearestNode~distance"
        }
      },
      "description": "Get the Node nearest to the given coordinates or Element.",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Syntree.Element"
            ]
          },
          "description": "x coordinate or Element to search from",
          "name": "a"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "if a is a an x coordinate, the corresponding y coordinate",
          "name": "b"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "function that must return true for a Node to be considered in the search",
          "name": "condition"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object",
              "boolean"
            ]
          },
          "description": "- data object on success, false on failure"
        }
      ],
      "name": "getNearestNode",
      "longname": "Syntree.Page#getNearestNode",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000721",
      "___s": true
    },
    {
      "comment": "/**\n * Select the node in the specified direction, or create a node there if one does not exist.\n *\n * @param {string} direction - 'left' or 'right'\n * @param {boolean} [fcreate=false] - force create instead of navigate\n *\n * @see Syntree.Workspace._eventRight\n * @see Syntree.Workspace._eventLeft\n */",
      "meta": {
        "range": [
          13209,
          15746
        ],
        "filename": "page.js",
        "lineno": 367,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100008242",
          "name": "Syntree.Page.prototype.navigateHorizontal",
          "type": "FunctionExpression",
          "paramnames": [
            "direction",
            "fcreate"
          ]
        },
        "vars": {
          "direction": "Syntree.Page#navigateHorizontal~direction",
          "fcreate": "Syntree.Page#navigateHorizontal~fcreate",
          "left": "Syntree.Page#navigateHorizontal~left",
          "right": "Syntree.Page#navigateHorizontal~right",
          "n": "Syntree.Page#navigateHorizontal~n",
          "off": "Syntree.Page#navigateHorizontal~off",
          "rowNodes": "Syntree.Page#navigateHorizontal~rowNodes",
          "selectedIndex": "Syntree.Page#navigateHorizontal~selectedIndex",
          "real": "Syntree.Page#navigateHorizontal~real",
          "siblingIndex": "Syntree.Page#navigateHorizontal~siblingIndex",
          "newNode": "Syntree.Page#navigateHorizontal~newNode",
          "tree": "Syntree.Page#navigateHorizontal~tree"
        }
      },
      "description": "Select the node in the specified direction, or create a node there if one does not exist.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "'left' or 'right'",
          "name": "direction"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "force create instead of navigate",
          "name": "fcreate"
        }
      ],
      "see": [
        "Syntree.Workspace._eventRight",
        "Syntree.Workspace._eventLeft"
      ],
      "name": "navigateHorizontal",
      "longname": "Syntree.Page#navigateHorizontal",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000745",
      "___s": true
    },
    {
      "comment": "/**\n * Select the parent of the currently selected Node\n */",
      "meta": {
        "range": [
          15808,
          16152
        ],
        "filename": "page.js",
        "lineno": 437,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100008621",
          "name": "Syntree.Page.prototype.navigateUp",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Select the parent of the currently selected Node",
      "name": "navigateUp",
      "longname": "Syntree.Page#navigateUp",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000766",
      "___s": true
    },
    {
      "comment": "/**\n * Select the most recently selected child of the currently selected node, or creates a child if one does not exist.\n * Defaults to the left-most child if no most recently selected.\n *\n * @param {boolean} [fcreate=false] - force creation instead of navigation\n */",
      "meta": {
        "range": [
          16422,
          17735
        ],
        "filename": "page.js",
        "lineno": 453,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100008696",
          "name": "Syntree.Page.prototype.navigateDown",
          "type": "FunctionExpression",
          "paramnames": [
            "fcreate"
          ]
        },
        "vars": {
          "fcreate": "Syntree.Page#navigateDown~fcreate",
          "possibleSelects": "Syntree.Page#navigateDown~possibleSelects",
          "selectHistory": "Syntree.Page#navigateDown~selectHistory",
          "i": "Syntree.Page#navigateDown~i",
          "newNode": "Syntree.Page#navigateDown~newNode",
          "tree": "Syntree.Page#navigateDown~tree"
        }
      },
      "description": "Select the most recently selected child of the currently selected node, or creates a child if one does not exist.\nDefaults to the left-most child if no most recently selected.",
      "params": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "force creation instead of navigation",
          "name": "fcreate"
        }
      ],
      "name": "navigateDown",
      "longname": "Syntree.Page#navigateDown",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000767",
      "___s": true
    },
    {
      "comment": "/**\n * Execute an editing action on given Node.\n *\n * @param {string} type - 'init', 'update', 'toggle', 'save', 'cancel'\n * @param {Syntree.Node} [node=Syntree.Page.selectedNode] - the node to target\n * @param\n */",
      "meta": {
        "range": [
          17952,
          19385
        ],
        "filename": "page.js",
        "lineno": 495,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100008912",
          "name": "Syntree.Page.prototype.nodeEditing",
          "type": "FunctionExpression",
          "paramnames": [
            "type",
            "node"
          ]
        },
        "vars": {
          "type": "Syntree.Page#nodeEditing~type",
          "node": "Syntree.Page#nodeEditing~node",
          "pre": "Syntree.Page#nodeEditing~pre",
          "post": "Syntree.Page#nodeEditing~post",
          "tree": "Syntree.Page#nodeEditing~tree"
        }
      },
      "description": "Execute an editing action on given Node.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "'init', 'update', 'toggle', 'save', 'cancel'",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "Syntree.Node"
            ]
          },
          "optional": true,
          "defaultvalue": "Syntree.Page.selectedNode",
          "description": "the node to target",
          "name": "node"
        },
        {
          "name": ""
        }
      ],
      "name": "nodeEditing",
      "longname": "Syntree.Page#nodeEditing",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000778",
      "___s": true
    },
    {
      "comment": "/**\n * Make custom handlers and attach them for panning functionality.\n */",
      "meta": {
        "range": [
          19539,
          20616
        ],
        "filename": "page.js",
        "lineno": 548,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100009138",
          "name": "Syntree.Page.prototype._enablePanning",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this._move": "Syntree.Page#_move",
          "": null,
          "this._end": "Syntree.Page#_end",
          "this._start": "Syntree.Page#_start"
        }
      },
      "description": "Make custom handlers and attach them for panning functionality.",
      "name": "_enablePanning",
      "longname": "Syntree.Page#_enablePanning",
      "kind": "function",
      "memberof": "Syntree.Page",
      "scope": "instance",
      "___id": "T000002R000791",
      "___s": true
    },
    {
      "comment": "/**\n     * Unique identifier, only used for trees you're going to save.\n     *\n     * @type {number}\n     *\n     * @see Syntree.Lib.genId\n     *\n     * @memberof Syntree.Tree\n     * @instance\n     */",
      "meta": {
        "range": [
          329,
          404
        ],
        "filename": "tree.js",
        "lineno": 14,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100009349",
          "name": "id",
          "type": "ObjectExpression",
          "value": "{\"require\":\"number\",\"default_value\":\"#undefined\"}"
        }
      },
      "description": "Unique identifier, only used for trees you're going to save.",
      "type": {
        "names": [
          "number"
        ]
      },
      "see": [
        "Syntree.Lib.genId"
      ],
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "name": "id",
      "longname": "Syntree.Tree#id",
      "kind": "member",
      "___id": "T000002R000805",
      "___s": true
    },
    {
      "comment": "/**\n     * How much vertical space to have between parent/child nodes.\n     *\n     * @type {number}\n     *\n     * @memberof Syntree.Tree\n     * @instance\n     */",
      "meta": {
        "range": [
          576,
          648
        ],
        "filename": "tree.js",
        "lineno": 26,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100009355",
          "name": "rowHeight",
          "type": "ObjectExpression",
          "value": "{\"require\":\"number\",\"default_value\":70}"
        }
      },
      "description": "How much vertical space to have between parent/child nodes.",
      "type": {
        "names": [
          "number"
        ]
      },
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "name": "rowHeight",
      "longname": "Syntree.Tree#rowHeight",
      "kind": "member",
      "___id": "T000002R000808",
      "___s": true
    },
    {
      "comment": "/**\n     * The root node of this Tree.\n     *\n     * @type {Syntree.Node}\n     *\n     * @memberof Syntree.Tree\n     * @instance\n     */",
      "meta": {
        "range": [
          794,
          869
        ],
        "filename": "tree.js",
        "lineno": 38,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100009361",
          "name": "root",
          "type": "ObjectExpression",
          "value": "{\"require\":\"node\",\"default_value\":\"#undefined\"}"
        }
      },
      "description": "The root node of this Tree.",
      "type": {
        "names": [
          "Syntree.Node"
        ]
      },
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "name": "root",
      "longname": "Syntree.Tree#root",
      "kind": "member",
      "___id": "T000002R000811",
      "___s": true
    },
    {
      "comment": "/**\n     * At construction time, a treestring to build this tree out of.\n     *\n     * @type {string}\n     *\n     * @see Syntree.Tree#_buildFromTreestring\n     *\n     * @memberof Syntree.Tree\n     * @instance\n     */",
      "meta": {
        "range": [
          1096,
          1185
        ],
        "filename": "tree.js",
        "lineno": 52,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100009367",
          "name": "build_treestring",
          "type": "ObjectExpression",
          "value": "{\"require\":\"string\",\"default_value\":\"#undefined\"}"
        }
      },
      "description": "At construction time, a treestring to build this tree out of.",
      "type": {
        "names": [
          "string"
        ]
      },
      "see": [
        "Syntree.Tree#_buildFromTreestring"
      ],
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "name": "build_treestring",
      "longname": "Syntree.Tree#build_treestring",
      "kind": "member",
      "___id": "T000002R000814",
      "___s": true
    },
    {
      "comment": "/**\n * @class\n * @classdesc Analogous to a linked list class, Tree is actually just a wrapper around some nodes which are linked to one another internally. Tree only stores a reference to the root node, and access all descendants through that link.\n */",
      "meta": {
        "range": [
          1444,
          2643
        ],
        "filename": "tree.js",
        "lineno": 63,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100009374",
          "name": "Syntree.Tree",
          "type": "FunctionExpression",
          "paramnames": [
            "config_matrix"
          ]
        },
        "vars": {
          "this.node_properties_to_save": "Syntree.Tree#node_properties_to_save",
          "": null
        }
      },
      "kind": "class",
      "classdesc": "Analogous to a linked list class, Tree is actually just a wrapper around some nodes which are linked to one another internally. Tree only stores a reference to the root node, and access all descendants through that link.",
      "name": "Tree",
      "longname": "Syntree.Tree",
      "memberof": "Syntree",
      "scope": "static",
      "___id": "T000002R000817",
      "___s": true
    },
    {
      "comment": "/**\n     * The Node properties that should be included in this tree's treestring.\n     *\n     * @type {object}\n     *\n     * @see Syntree.Tree#_buildFromTreestring\n     */",
      "meta": {
        "range": [
          2067,
          2640
        ],
        "filename": "tree.js",
        "lineno": 81,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100009440",
          "name": "this.node_properties_to_save",
          "type": "ObjectExpression",
          "value": "{\"id\":\"\",\"children\":\"\",\"parent\":\"\",\"labelContent\":\"\"}",
          "paramnames": []
        }
      },
      "description": "The Node properties that should be included in this tree's treestring.",
      "type": {
        "names": [
          "object"
        ]
      },
      "see": [
        "Syntree.Tree#_buildFromTreestring"
      ],
      "name": "node_properties_to_save",
      "longname": "Syntree.Tree#node_properties_to_save",
      "kind": "member",
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "___id": "T000002R000818",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for Tree.id.\n *\n * @see Syntree.Tree#id\n */",
      "meta": {
        "range": [
          2714,
          2779
        ],
        "filename": "tree.js",
        "lineno": 108,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100009519",
          "name": "Syntree.Tree.prototype.getId",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for Tree.id.",
      "see": [
        "Syntree.Tree#id"
      ],
      "name": "getId",
      "longname": "Syntree.Tree#getId",
      "kind": "function",
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "___id": "T000002R000823",
      "___s": true
    },
    {
      "comment": "/**\n * Setter function for Tree.id.\n *\n * @param {number} id - new id\n *\n * @see Syntree.Tree#id\n */",
      "meta": {
        "range": [
          2882,
          2992
        ],
        "filename": "tree.js",
        "lineno": 119,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100009534",
          "name": "Syntree.Tree.prototype.setId",
          "type": "FunctionExpression",
          "paramnames": [
            "id"
          ]
        },
        "vars": {
          "id": "Syntree.Tree#setId~id",
          "this.id": "Syntree.Tree#id"
        }
      },
      "description": "Setter function for Tree.id.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "new id",
          "name": "id"
        }
      ],
      "see": [
        "Syntree.Tree#id"
      ],
      "name": "setId",
      "longname": "Syntree.Tree#setId",
      "kind": "function",
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "___id": "T000002R000824",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for Tree.root\n *\n * @see Syntree.Tree#root\n */",
      "meta": {
        "range": [
          3066,
          3135
        ],
        "filename": "tree.js",
        "lineno": 129,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100009563",
          "name": "Syntree.Tree.prototype.getRoot",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for Tree.root",
      "see": [
        "Syntree.Tree#root"
      ],
      "name": "getRoot",
      "longname": "Syntree.Tree#getRoot",
      "kind": "function",
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "___id": "T000002R000827",
      "___s": true
    },
    {
      "comment": "/**\n * Get an SVG path that outlines this Tree.\n *\n * @param {string} which - 'left' or 'right' for which side of this Tree to outline, defaults to both sides\n *\n * @returns {object} - the path string, along with the visual bounds of the Tree.\n */",
      "meta": {
        "range": [
          3385,
          7006
        ],
        "filename": "tree.js",
        "lineno": 140,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100009578",
          "name": "Syntree.Tree.prototype._getPath",
          "type": "FunctionExpression",
          "paramnames": [
            "which"
          ]
        },
        "vars": {
          "which": "Syntree.Tree#_getPath~which",
          "toReturn": "Syntree.Tree#_getPath~toReturn",
          "Left": "Syntree.Tree#_getPath~Left",
          "Right": "Syntree.Tree#_getPath~Right",
          "rootBBox": "Syntree.Tree#_getPath~rootBBox",
          "rootPos": "Syntree.Tree#_getPath~rootPos",
          "Y": "Syntree.Tree#_getPath~Y",
          "toReturn.topBound": "Syntree.Tree#_getPath~toReturn.topBound",
          "toReturn.bottomBound": "Syntree.Tree#_getPath~toReturn.bottomBound",
          "rX": "Syntree.Tree#_getPath~rX",
          "rPathString": "Syntree.Tree#_getPath~rPathString",
          "rBound": "Syntree.Tree#_getPath~rBound",
          "lX": "Syntree.Tree#_getPath~lX",
          "lPathString": "Syntree.Tree#_getPath~lPathString",
          "lBound": "Syntree.Tree#_getPath~lBound",
          "lastNodes": "Syntree.Tree#_getPath~lastNodes",
          "row": "Syntree.Tree#_getPath~row",
          "rowNodes": "Syntree.Tree#_getPath~rowNodes",
          "rNode": "Syntree.Tree#_getPath~rNode",
          "rPos": "Syntree.Tree#_getPath~rPos",
          "rBBox": "Syntree.Tree#_getPath~rBBox",
          "newRX": "Syntree.Tree#_getPath~newRX",
          "rBotBound": "Syntree.Tree#_getPath~rBotBound",
          "lNode": "Syntree.Tree#_getPath~lNode",
          "lPos": "Syntree.Tree#_getPath~lPos",
          "lBBox": "Syntree.Tree#_getPath~lBBox",
          "newLX": "Syntree.Tree#_getPath~newLX",
          "lBotBound": "Syntree.Tree#_getPath~lBotBound",
          "toReturn.pathString": "Syntree.Tree#_getPath~toReturn.pathString",
          "toReturn.rightBound": "Syntree.Tree#_getPath~toReturn.rightBound",
          "toReturn.leftBound": "Syntree.Tree#_getPath~toReturn.leftBound"
        }
      },
      "description": "Get an SVG path that outlines this Tree.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "'left' or 'right' for which side of this Tree to outline, defaults to both sides",
          "name": "which"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "- the path string, along with the visual bounds of the Tree."
        }
      ],
      "name": "_getPath",
      "longname": "Syntree.Tree#_getPath",
      "kind": "function",
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "___id": "T000002R000828",
      "___s": true
    },
    {
      "comment": "/**\n * Get all descendants of the specified Node.\n *\n * @param {Syntree.Node} [node=this.root]\n * @param {string} [attr=''] - the attr used to represent each Node\n * @param {boolean} [inclusive=true] - include the starting Node in the results?\n * @param {boolean} [flat=false] - squash everything down into a flat array of Nodes\n *\n * @returns {object[]|Syntree.Node[]} - either an array of Nodes, or an array of objects containing more arrays represnting the descendant structure\n */",
      "meta": {
        "range": [
          7493,
          9186
        ],
        "filename": "tree.js",
        "lineno": 270,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100010254",
          "name": "Syntree.Tree.prototype.getDescendantsOf",
          "type": "FunctionExpression",
          "paramnames": [
            "node",
            "attr",
            "inclusive",
            "flat"
          ]
        },
        "vars": {
          "node": "Syntree.Tree#getDescendantsOf~node",
          "attr": "Syntree.Tree#getDescendantsOf~attr",
          "inclusive": "Syntree.Tree#getDescendantsOf~inclusive",
          "flat": "Syntree.Tree#getDescendantsOf~flat",
          "getAttr": "Syntree.Tree#getDescendantsOf~getAttr",
          "result": "Syntree.Tree#getDescendantsOf~result",
          "len": "Syntree.Tree#getDescendantsOf~len",
          "i": "Syntree.Tree#getDescendantsOf~i",
          "thisChild": "Syntree.Tree#getDescendantsOf~thisChild",
          "toAdd": "Syntree.Tree#getDescendantsOf~toAdd",
          "toAdd[undefined]": "Syntree.Tree#getDescendantsOf~toAdd.undefined]",
          "t": "Syntree.Tree#getDescendantsOf~t",
          "temp": "Syntree.Tree#getDescendantsOf~temp",
          "temp[undefined]": "Syntree.Tree#getDescendantsOf~temp.undefined]"
        }
      },
      "description": "Get all descendants of the specified Node.",
      "params": [
        {
          "type": {
            "names": [
              "Syntree.Node"
            ]
          },
          "optional": true,
          "defaultvalue": "this.root",
          "name": "node"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "''",
          "description": "the attr used to represent each Node",
          "name": "attr"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "include the starting Node in the results?",
          "name": "inclusive"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "squash everything down into a flat array of Nodes",
          "name": "flat"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<object>",
              "Array.<Syntree.Node>"
            ]
          },
          "description": "- either an array of Nodes, or an array of objects containing more arrays represnting the descendant structure"
        }
      ],
      "name": "getDescendantsOf",
      "longname": "Syntree.Tree#getDescendantsOf",
      "kind": "function",
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "___id": "T000002R000894",
      "___s": true
    },
    {
      "comment": "/**\n * Get a Node's offset from a given Node.\n *\n * @param {Syntree.Node} fromNode - the Node to check from\n * @param {Syntree.Node} toNode - the Node to check to\n *\n * @returns {number} - how many levels between fromNode and toNode\n */",
      "meta": {
        "range": [
          9425,
          9916
        ],
        "filename": "tree.js",
        "lineno": 338,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100010523",
          "name": "Syntree.Tree.prototype.getNodeOffset",
          "type": "FunctionExpression",
          "paramnames": [
            "fromNode",
            "toNode"
          ]
        },
        "vars": {
          "fromNode": "Syntree.Tree#getNodeOffset~fromNode",
          "toNode": "Syntree.Tree#getNodeOffset~toNode",
          "currNode": "Syntree.Tree#getNodeOffset~currNode",
          "off": "Syntree.Tree#getNodeOffset~off",
          "parent": "Syntree.Tree#getNodeOffset~parent"
        }
      },
      "description": "Get a Node's offset from a given Node.",
      "params": [
        {
          "type": {
            "names": [
              "Syntree.Node"
            ]
          },
          "description": "the Node to check from",
          "name": "fromNode"
        },
        {
          "type": {
            "names": [
              "Syntree.Node"
            ]
          },
          "description": "the Node to check to",
          "name": "toNode"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "- how many levels between fromNode and toNode"
        }
      ],
      "name": "getNodeOffset",
      "longname": "Syntree.Tree#getNodeOffset",
      "kind": "function",
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "___id": "T000002R000920",
      "___s": true
    },
    {
      "comment": "/**\n * Get all Nodes at a specified offset from a given Node.\n *\n * @param {number} off - what offset to return Nodes from\n * @param {Syntree.Node} [node=this.root] - the Node to search from\n */",
      "meta": {
        "range": [
          10113,
          10778
        ],
        "filename": "tree.js",
        "lineno": 366,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100010599",
          "name": "Syntree.Tree.prototype.getNodesByOffset",
          "type": "FunctionExpression",
          "paramnames": [
            "off",
            "node"
          ]
        },
        "vars": {
          "off": "Syntree.Tree#getNodesByOffset~off",
          "node": "Syntree.Tree#getNodesByOffset~node",
          "result": "Syntree.Tree#getNodesByOffset~result",
          "children": "Syntree.Tree#getNodesByOffset~children",
          "c": "Syntree.Tree#getNodesByOffset~c"
        }
      },
      "description": "Get all Nodes at a specified offset from a given Node.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "what offset to return Nodes from",
          "name": "off"
        },
        {
          "type": {
            "names": [
              "Syntree.Node"
            ]
          },
          "optional": true,
          "defaultvalue": "this.root",
          "description": "the Node to search from",
          "name": "node"
        }
      ],
      "name": "getNodesByOffset",
      "longname": "Syntree.Tree#getNodesByOffset",
      "kind": "function",
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "___id": "T000002R000927",
      "___s": true
    },
    {
      "comment": "/**\n * Get a treestring for this Tree.\n * A treestring contains all information required to describe Tree at a data level.\n *\n * @returns {string} - the treestring\n *\n * @see Syntree.Tree#node_properties_to_save\n * @see Syntree.Tree#_buildFromTreestring\n */",
      "meta": {
        "range": [
          11038,
          11479
        ],
        "filename": "tree.js",
        "lineno": 399,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100010704",
          "name": "Syntree.Tree.prototype.getTreestring",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "s": "Syntree.Tree#getTreestring~s",
          "nodes": "Syntree.Tree#getTreestring~nodes",
          "i": "Syntree.Tree#getTreestring~i",
          "node": "Syntree.Tree#getTreestring~node"
        }
      },
      "description": "Get a treestring for this Tree.\nA treestring contains all information required to describe Tree at a data level.",
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "- the treestring"
        }
      ],
      "see": [
        "Syntree.Tree#node_properties_to_save",
        "Syntree.Tree#_buildFromTreestring"
      ],
      "name": "getTreestring",
      "longname": "Syntree.Tree#getTreestring",
      "kind": "function",
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "___id": "T000002R000934",
      "___s": true
    },
    {
      "comment": "/**\n * Get this Tree as bracket notation.\n *\n * @param {Syntree.Node} [node=this.root] - the Node to start from\n *\n * @returns {string} - bracket notation representing this Tree\n */",
      "meta": {
        "range": [
          11663,
          12210
        ],
        "filename": "tree.js",
        "lineno": 424,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100010786",
          "name": "Syntree.Tree.prototype.getBracketNotation",
          "type": "FunctionExpression",
          "paramnames": [
            "node"
          ]
        },
        "vars": {
          "node": "Syntree.Tree#getBracketNotation~node",
          "string": "Syntree.Tree#getBracketNotation~string",
          "children": "Syntree.Tree#getBracketNotation~children",
          "c": "Syntree.Tree#getBracketNotation~c",
          "thisChild": "Syntree.Tree#getBracketNotation~thisChild",
          "add": "Syntree.Tree#getBracketNotation~add"
        }
      },
      "description": "Get this Tree as bracket notation.",
      "params": [
        {
          "type": {
            "names": [
              "Syntree.Node"
            ]
          },
          "optional": true,
          "defaultvalue": "this.root",
          "description": "the Node to start from",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "- bracket notation representing this Tree"
        }
      ],
      "name": "getBracketNotation",
      "longname": "Syntree.Tree#getBracketNotation",
      "kind": "function",
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "___id": "T000002R000944",
      "___s": true
    },
    {
      "comment": "/**\n * Distribute the Nodes in this Tree such that they are spread out nicely and don't collide.\n *\n * @param {number} [angle=60] - the angle to spread Nodes across\n */",
      "meta": {
        "range": [
          12381,
          14862
        ],
        "filename": "tree.js",
        "lineno": 448,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100010886",
          "name": "Syntree.Tree.prototype.distribute",
          "type": "FunctionExpression",
          "paramnames": [
            "angle"
          ]
        },
        "vars": {
          "angle": "Syntree.Tree#distribute~angle",
          "children": "Syntree.Tree#distribute~children",
          "pos": "Syntree.Tree#distribute~pos",
          "leftBound": "Syntree.Tree#distribute~leftBound",
          "rightBound": "Syntree.Tree#distribute~rightBound",
          "width": "Syntree.Tree#distribute~width",
          "interval": "Syntree.Tree#distribute~interval",
          "i": "Syntree.Tree#distribute~i",
          "targetY": "Syntree.Tree#distribute~targetY",
          "targetX": "Syntree.Tree#distribute~targetX",
          "c": "Syntree.Tree#distribute~c",
          "intersect": "Syntree.Tree#distribute~intersect",
          "newWidth": "Syntree.Tree#distribute~newWidth",
          "lChild": "Syntree.Tree#distribute~lChild",
          "rChild": "Syntree.Tree#distribute~rChild",
          "lNode": "Syntree.Tree#distribute~lNode",
          "rNode": "Syntree.Tree#distribute~rNode",
          "lBBox": "Syntree.Tree#distribute~lBBox",
          "rBBox": "Syntree.Tree#distribute~rBBox",
          "lBound": "Syntree.Tree#distribute~lBound",
          "rBound": "Syntree.Tree#distribute~rBound",
          "overlap": "Syntree.Tree#distribute~overlap",
          "newAngle": "Syntree.Tree#distribute~newAngle",
          "oldAngle": "Syntree.Tree#distribute~oldAngle",
          "tree": "Syntree.Tree#distribute~tree"
        }
      },
      "description": "Distribute the Nodes in this Tree such that they are spread out nicely and don't collide.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 60,
          "description": "the angle to spread Nodes across",
          "name": "angle"
        }
      ],
      "name": "distribute",
      "longname": "Syntree.Tree#distribute",
      "kind": "function",
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "___id": "T000002R000954",
      "___s": true
    },
    {
      "comment": "/**\n * Delete this Tree.\n */",
      "meta": {
        "range": [
          15418,
          15622
        ],
        "filename": "tree.js",
        "lineno": 541,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100011432",
          "name": "Syntree.Tree.prototype.delete",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "nodes": "Syntree.Tree#delete~nodes",
          "i": "Syntree.Tree#delete~i"
        }
      },
      "description": "Delete this Tree.",
      "name": "delete",
      "longname": "Syntree.Tree#delete",
      "kind": "function",
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "___id": "T000002R000992",
      "___s": true
    },
    {
      "comment": "/**\n * Instead of just passively wrapping around the given root Node and its descendants,\n * create nodes and attach them based on data from a treestring.\n *\n * @param {string} treestring - the treestring to use\n *\n * @see Syntree.Tree#build_treestring\n * @see Syntree.Tree#getTreestring\n */",
      "meta": {
        "range": [
          15989,
          17869
        ],
        "filename": "tree.js",
        "lineno": 563,
        "path": "/var/www/html/syntree/app/classes",
        "code": {
          "id": "astnode100011490",
          "name": "Syntree.Tree.prototype._buildFromTreestring",
          "type": "FunctionExpression",
          "paramnames": [
            "treestring"
          ]
        },
        "vars": {
          "treestring": "Syntree.Tree#_buildFromTreestring~treestring",
          "node_entries": "Syntree.Tree#_buildFromTreestring~node_entries",
          "node_entry_list": "Syntree.Tree#_buildFromTreestring~node_entry_list",
          "i": "Syntree.Tree#_buildFromTreestring~i",
          "node_config": "Syntree.Tree#_buildFromTreestring~node_config",
          "attrs": "Syntree.Tree#_buildFromTreestring~attrs",
          "ii": "Syntree.Tree#_buildFromTreestring~ii",
          "name": "Syntree.Tree#_buildFromTreestring~name",
          "val": "Syntree.Tree#_buildFromTreestring~val",
          "node_config[undefined]": "Syntree.Tree#_buildFromTreestring~node_config.undefined]",
          "rootAttrs": "Syntree.Tree#_buildFromTreestring~rootAttrs",
          "this.root": "Syntree.Tree#root",
          "n": "Syntree.Tree#_buildFromTreestring~n",
          "entry": "Syntree.Tree#_buildFromTreestring~entry",
          "newnode": "Syntree.Tree#_buildFromTreestring~newnode",
          "childIds": "Syntree.Tree#_buildFromTreestring~childIds",
          "c": "Syntree.Tree#_buildFromTreestring~c",
          "temp": "Syntree.Tree#_buildFromTreestring~temp"
        }
      },
      "description": "Instead of just passively wrapping around the given root Node and its descendants,\ncreate nodes and attach them based on data from a treestring.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the treestring to use",
          "name": "treestring"
        }
      ],
      "see": [
        "Syntree.Tree#build_treestring",
        "Syntree.Tree#getTreestring"
      ],
      "name": "_buildFromTreestring",
      "longname": "Syntree.Tree#_buildFromTreestring",
      "kind": "function",
      "memberof": "Syntree.Tree",
      "scope": "instance",
      "___id": "T000002R000996",
      "___s": true
    },
    {
      "comment": "/**\n * @class\n * @classdesc Manages and stores [Actions]{@link Syntree.Action}\n */",
      "meta": {
        "range": [
          83,
          4180
        ],
        "filename": "history.js",
        "lineno": 5,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100011821",
          "name": "Syntree.History",
          "type": "ObjectExpression",
          "value": "{\"actions\":\"\",\"silent\":false,\"addAction\":\"\",\"getLast\":\"\",\"getAll\":\"\",\"getAllByType\":\"\",\"getLastOfType\":\"\",\"undo\":\"\",\"removeAction\":\"\",\"getNodeSelects\":\"\",\"toString\":\"\"}",
          "paramnames": []
        }
      },
      "kind": "class",
      "classdesc": "Manages and stores [Actions]{@link Syntree.Action}",
      "name": "History",
      "longname": "Syntree.History",
      "memberof": "Syntree",
      "scope": "static",
      "___id": "T000002R001024",
      "___s": true
    },
    {
      "comment": "/**\n     * Actions is stored as a queue with the most recent action at the end (index length-1).\n     * Note that it is returned as an array with the most recent action at the front (index 0).\n     *\n     * @see Syntree.History.getAll()\n     */",
      "meta": {
        "range": [
          356,
          367
        ],
        "filename": "history.js",
        "lineno": 12,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100011826",
          "name": "actions",
          "type": "ArrayExpression",
          "value": "[]"
        }
      },
      "description": "Actions is stored as a queue with the most recent action at the end (index length-1).\nNote that it is returned as an array with the most recent action at the front (index 0).",
      "see": [
        "Syntree.History.getAll()"
      ],
      "name": "actions",
      "longname": "Syntree.History.actions",
      "kind": "member",
      "memberof": "Syntree.History",
      "scope": "static",
      "___id": "T000002R001025",
      "___s": true
    },
    {
      "comment": "/**\n     * While this is set to true, no [Actions]{@link Syntree.Action} are added to the history.\n     * This is used so that we don't have to worry about creating new [Actions]{@link Syntree.Action} while undoing old ones.\n     */",
      "meta": {
        "range": [
          611,
          624
        ],
        "filename": "history.js",
        "lineno": 18,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100011828",
          "name": "silent",
          "type": "Literal",
          "value": false
        }
      },
      "description": "While this is set to true, no [Actions]{@link Syntree.Action} are added to the history.\nThis is used so that we don't have to worry about creating new [Actions]{@link Syntree.Action} while undoing old ones.",
      "name": "silent",
      "longname": "Syntree.History.silent",
      "kind": "member",
      "memberof": "Syntree.History",
      "scope": "static",
      "___id": "T000002R001026",
      "___s": true
    },
    {
      "comment": "/**\n     * Add an action to the history.\n     *\n     * @see Syntree.History.actions\n     */",
      "meta": {
        "range": [
          727,
          897
        ],
        "filename": "history.js",
        "lineno": 25,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100011830",
          "name": "addAction",
          "type": "FunctionExpression"
        },
        "vars": {
          "action": "Syntree.History.addAction~action"
        }
      },
      "description": "Add an action to the history.",
      "see": [
        "Syntree.History.actions"
      ],
      "name": "addAction",
      "longname": "Syntree.History.addAction",
      "kind": "function",
      "memberof": "Syntree.History",
      "scope": "static",
      "___id": "T000002R001027",
      "___s": true
    },
    {
      "comment": "/**\n     * Get the most recent [Action]{@link Syntree.Action}.\n     *\n     * @see Syntree.History.actions\n     * @returns {Syntree.Action} - the most recent action.\n     */",
      "meta": {
        "range": [
          1081,
          1160
        ],
        "filename": "history.js",
        "lineno": 39,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100011859",
          "name": "getLast",
          "type": "FunctionExpression"
        }
      },
      "description": "Get the most recent [Action]{@link Syntree.Action}.",
      "see": [
        "Syntree.History.actions"
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Syntree.Action"
            ]
          },
          "description": "- the most recent action."
        }
      ],
      "name": "getLast",
      "longname": "Syntree.History.getLast",
      "kind": "function",
      "memberof": "Syntree.History",
      "scope": "static",
      "___id": "T000002R001029",
      "___s": true
    },
    {
      "comment": "/**\n     * Get all [Actions]{@link Syntree.Action}, reversed so that the most recent is at the front.\n     *\n     * @returns {Syntree.Action[]} - all actions in the history.\n     *\n     * @see Syntree.History.actions\n     */",
      "meta": {
        "range": [
          1396,
          1469
        ],
        "filename": "history.js",
        "lineno": 50,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100011874",
          "name": "getAll",
          "type": "FunctionExpression"
        }
      },
      "description": "Get all [Actions]{@link Syntree.Action}, reversed so that the most recent is at the front.",
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Syntree.Action>"
            ]
          },
          "description": "- all actions in the history."
        }
      ],
      "see": [
        "Syntree.History.actions"
      ],
      "name": "getAll",
      "longname": "Syntree.History.getAll",
      "kind": "function",
      "memberof": "Syntree.History",
      "scope": "static",
      "___id": "T000002R001030",
      "___s": true
    },
    {
      "comment": "/**\n     * Get all [Actions]{@link Syntree.Action}, reversed so that the most recent is at the front.\n     * Filter by given type.\n     *\n     * @param {string} - type of action to filter by, e.g. 'select'\n     * @returns {Syntree.Action[]} - all actions matching the given type\n     *\n     * @see Syntree.History.getAll\n     * @see Syntree.History.actions\n     */",
      "meta": {
        "range": [
          1845,
          2091
        ],
        "filename": "history.js",
        "lineno": 64,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100011887",
          "name": "getAllByType",
          "type": "FunctionExpression"
        },
        "vars": {
          "type": "Syntree.History.getAllByType~type",
          "filtered": "Syntree.History.getAllByType~filtered",
          "": null
        }
      },
      "description": "Get all [Actions]{@link Syntree.Action}, reversed so that the most recent is at the front.\nFilter by given type.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "type of action to filter by, e.g. 'select'"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Syntree.Action>"
            ]
          },
          "description": "- all actions matching the given type"
        }
      ],
      "see": [
        "Syntree.History.getAll",
        "Syntree.History.actions"
      ],
      "name": "getAllByType",
      "longname": "Syntree.History.getAllByType",
      "kind": "function",
      "memberof": "Syntree.History",
      "scope": "static",
      "___id": "T000002R001031",
      "___s": true
    },
    {
      "comment": "/**\n     * Get the most recent [Action]{@link Syntree.Action} of given type.\n     *\n     * @param {string} - type of action to filter by, e.g. 'select'\n     * @returns {Syntree.Action} - most recent action of given type\n     *\n     * @see Syntree.History.getLast\n     * @see Syntree.History.actions\n     */",
      "meta": {
        "range": [
          2409,
          2586
        ],
        "filename": "history.js",
        "lineno": 82,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100011928",
          "name": "getLastOfType",
          "type": "FunctionExpression"
        },
        "vars": {
          "type": "Syntree.History.getLastOfType~type",
          "actions": "Syntree.History.getLastOfType~actions"
        }
      },
      "description": "Get the most recent [Action]{@link Syntree.Action} of given type.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "type of action to filter by, e.g. 'select'"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Syntree.Action"
            ]
          },
          "description": "- most recent action of given type"
        }
      ],
      "see": [
        "Syntree.History.getLast",
        "Syntree.History.actions"
      ],
      "name": "getLastOfType",
      "longname": "Syntree.History.getLastOfType",
      "kind": "function",
      "memberof": "Syntree.History",
      "scope": "static",
      "___id": "T000002R001034",
      "___s": true
    },
    {
      "comment": "/**\n     * Undo the most recent undoable [Action]{@link Syntree.Action}.\n     * During this function, History is silenced so that it does not collect eroneously produced [Actions]{@link Syntree.Action}.\n     *\n     * @see Syntree.History.silent\n     */",
      "meta": {
        "range": [
          2850,
          3216
        ],
        "filename": "history.js",
        "lineno": 95,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100011959",
          "name": "undo",
          "type": "FunctionExpression"
        },
        "vars": {
          "this.silent": "Syntree.History.undo#silent",
          "all": "Syntree.History.undo~all",
          "i": "Syntree.History.undo~i"
        }
      },
      "description": "Undo the most recent undoable [Action]{@link Syntree.Action}.\nDuring this function, History is silenced so that it does not collect eroneously produced [Actions]{@link Syntree.Action}.",
      "see": [
        "Syntree.History.silent"
      ],
      "name": "undo",
      "longname": "Syntree.History.undo",
      "kind": "function",
      "memberof": "Syntree.History",
      "scope": "static",
      "___id": "T000002R001037",
      "___s": true
    },
    {
      "comment": "/**\n     * Remove the given [Action]{@link Syntree.Action} from the history.\n     *\n     * @param {Syntree.Action} - action to remove\n     *\n     * @see Syntree.History.actions\n     */",
      "meta": {
        "range": [
          3412,
          3549
        ],
        "filename": "history.js",
        "lineno": 116,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012025",
          "name": "removeAction",
          "type": "FunctionExpression"
        },
        "vars": {
          "a": "Syntree.History.removeAction~a"
        }
      },
      "description": "Remove the given [Action]{@link Syntree.Action} from the history.",
      "params": [
        {
          "type": {
            "names": [
              "Syntree.Action"
            ]
          },
          "description": "action to remove"
        }
      ],
      "see": [
        "Syntree.History.actions"
      ],
      "name": "removeAction",
      "longname": "Syntree.History.removeAction",
      "kind": "function",
      "memberof": "Syntree.History",
      "scope": "static",
      "___id": "T000002R001043",
      "___s": true
    },
    {
      "comment": "/**\n     * Get all [Actions]{@link Syntree.Action} representing a Node selection.\n     * This is a convenience function, so that we don't have to filter for selected element type inline.\n     *\n     * @returns {Syntree.Action[]} - all Node select actions, most recent at index 0\n     *\n     * @see Syntree.History.actions\n     */",
      "meta": {
        "range": [
          3890,
          4108
        ],
        "filename": "history.js",
        "lineno": 130,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012055",
          "name": "getNodeSelects",
          "type": "FunctionExpression"
        },
        "vars": {
          "res": "Syntree.History.getNodeSelects~res",
          "": null
        }
      },
      "description": "Get all [Actions]{@link Syntree.Action} representing a Node selection.\nThis is a convenience function, so that we don't have to filter for selected element type inline.",
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Syntree.Action>"
            ]
          },
          "description": "- all Node select actions, most recent at index 0"
        }
      ],
      "see": [
        "Syntree.History.actions"
      ],
      "name": "getNodeSelects",
      "longname": "Syntree.History.getNodeSelects",
      "kind": "function",
      "memberof": "Syntree.History",
      "scope": "static",
      "___id": "T000002R001045",
      "___s": true
    },
    {
      "comment": "/** @namespace */",
      "meta": {
        "range": [
          18,
          30
        ],
        "filename": "lib.js",
        "lineno": 2,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012096",
          "name": "Syntree",
          "type": "ObjectExpression",
          "value": "{}",
          "paramnames": []
        }
      },
      "kind": "namespace",
      "name": "Syntree",
      "longname": "Syntree",
      "scope": "global",
      "___id": "T000002R001049",
      "___s": true
    },
    {
      "comment": "/**\n * Data on what properties can be configured onto given object types.\n *\n * @property classname {object} - the data for each class\n * @property classname.accept_unmapped_config {boolean} - whether or not accept configuration properties that are not represented in the config map\n * @property classname.map {object} - an object representing the possible configuration properties, their required types, and the default values to provide if the type check is not passed\n * @type {object}\n * @see Syntree.Lib.config\n */",
      "meta": {
        "range": [
          613,
          637
        ],
        "filename": "lib.js",
        "lineno": 13,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012100",
          "name": "Syntree.config_maps",
          "type": "ObjectExpression",
          "value": "{}",
          "paramnames": []
        }
      },
      "description": "Data on what properties can be configured onto given object types.",
      "properties": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "the data for each class",
          "name": "classname"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "whether or not accept configuration properties that are not represented in the config map",
          "name": "classname.accept_unmapped_config"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "an object representing the possible configuration properties, their required types, and the default values to provide if the type check is not passed",
          "name": "classname.map"
        }
      ],
      "type": {
        "names": [
          "object"
        ]
      },
      "see": [
        "Syntree.Lib.config"
      ],
      "name": "config_maps",
      "longname": "Syntree.config_maps",
      "kind": "member",
      "memberof": "Syntree",
      "scope": "static",
      "___id": "T000002R001050",
      "___s": true
    },
    {
      "comment": "/**\n     * The snap object tied to our svg workspace.\n     *\n     * @memberof Syntree\n     */",
      "meta": {
        "range": [
          790,
          823
        ],
        "filename": "lib.js",
        "lineno": 21,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012114",
          "name": "Syntree.snap",
          "type": "CallExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "The snap object tied to our svg workspace.",
      "memberof": "Syntree",
      "name": "snap",
      "longname": "Syntree.snap",
      "kind": "member",
      "scope": "static",
      "___id": "T000002R001052",
      "___s": true
    },
    {
      "comment": "/** @class\n * @classdesc What you'd expect -- various utility and cross-class functions.\n */",
      "meta": {
        "range": [
          971,
          12371
        ],
        "filename": "lib.js",
        "lineno": 28,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012130",
          "name": "Syntree.Lib",
          "type": "ObjectExpression",
          "value": "{\"config\":\"\",\"focusNoScroll\":\"\",\"allIds\":\"\",\"idN\":1000,\"genId\":\"\",\"typeOf\":\"\",\"checkType\":\"\",\"checkArg\":\"\",\"distance\":\"\",\"capitalize\":\"\",\"getMidPoint\":\"\",\"visualToActualCoordinates\":\"\",\"extend\":\"\"}",
          "paramnames": []
        }
      },
      "kind": "class",
      "classdesc": "What you'd expect -- various utility and cross-class functions.",
      "name": "Lib",
      "longname": "Syntree.Lib",
      "memberof": "Syntree",
      "scope": "static",
      "___id": "T000002R001053",
      "___s": true
    },
    {
      "comment": "/**\n     * Add properties to a given object, using that object's config_map property to check types and apply defaults.\n     *\n     * @param {object} matrix - An object of properties to be appended to the target\n     * @param {object} target - The object to be 'configured'\n     */",
      "meta": {
        "range": [
          1277,
          2789
        ],
        "filename": "lib.js",
        "lineno": 35,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012135",
          "name": "config",
          "type": "FunctionExpression"
        },
        "vars": {
          "targetType": "Syntree.Lib.config~targetType",
          "map": "Syntree.Lib.config~map",
          "accept_unmapped_config": "Syntree.Lib.config~accept_unmapped_config",
          "require": "Syntree.Lib.config~require",
          "default_value": "Syntree.Lib.config~default_value",
          "target[undefined]": null
        }
      },
      "description": "Add properties to a given object, using that object's config_map property to check types and apply defaults.",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "An object of properties to be appended to the target",
          "name": "matrix"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "The object to be 'configured'",
          "name": "target"
        }
      ],
      "name": "config",
      "longname": "Syntree.Lib.config",
      "kind": "function",
      "memberof": "Syntree.Lib",
      "scope": "static",
      "___id": "T000002R001054",
      "___s": true
    },
    {
      "comment": "/**\n     * Just a function that allows us to focus an element without auto-scrolling to it.\n     * Useful if the app is embedded in a larger page.\n     *\n     * @param {jQuery_Object} elem - A page element to scroll to\n     */",
      "meta": {
        "range": [
          3027,
          3173
        ],
        "filename": "lib.js",
        "lineno": 75,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012266",
          "name": "focusNoScroll",
          "type": "FunctionExpression"
        },
        "vars": {
          "x": "Syntree.Lib.focusNoScroll~x",
          "y": "Syntree.Lib.focusNoScroll~y"
        }
      },
      "description": "Just a function that allows us to focus an element without auto-scrolling to it.\nUseful if the app is embedded in a larger page.",
      "params": [
        {
          "type": {
            "names": [
              "jQuery_Object"
            ]
          },
          "description": "A page element to scroll to",
          "name": "elem"
        }
      ],
      "name": "focusNoScroll",
      "longname": "Syntree.Lib.focusNoScroll",
      "kind": "function",
      "memberof": "Syntree.Lib",
      "scope": "static",
      "___id": "T000002R001063",
      "___s": true
    },
    {
      "comment": "/**\n     * Keeps track of ids that have been generated.\n     * @see Syntree.Lib.genId\n     */",
      "meta": {
        "range": [
          3278,
          3288
        ],
        "filename": "lib.js",
        "lineno": 86,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012294",
          "name": "allIds",
          "type": "ArrayExpression",
          "value": "[]"
        }
      },
      "description": "Keeps track of ids that have been generated.",
      "see": [
        "Syntree.Lib.genId"
      ],
      "name": "allIds",
      "longname": "Syntree.Lib.allIds",
      "kind": "member",
      "memberof": "Syntree.Lib",
      "scope": "static",
      "___id": "T000002R001066",
      "___s": true
    },
    {
      "comment": "/**\n     * The upper bound of random number generation for ids.\n     * Increases if we get too close.\n     *\n     * @see Syntree.Lib.genId\n     */",
      "meta": {
        "range": [
          3446,
          3455
        ],
        "filename": "lib.js",
        "lineno": 94,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012296",
          "name": "idN",
          "type": "Literal",
          "value": 1000
        }
      },
      "description": "The upper bound of random number generation for ids.\nIncreases if we get too close.",
      "see": [
        "Syntree.Lib.genId"
      ],
      "name": "idN",
      "longname": "Syntree.Lib.idN",
      "kind": "member",
      "memberof": "Syntree.Lib",
      "scope": "static",
      "___id": "T000002R001067",
      "___s": true
    },
    {
      "comment": "/**\n     * Generates a unique id (unique within this session).\n     *\n     * @see Syntree.Lib.allIds\n     * @see Syntree.Lib.idN\n     * @returns {number} a session-unique id\n     */",
      "meta": {
        "range": [
          3648,
          3980
        ],
        "filename": "lib.js",
        "lineno": 103,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012298",
          "name": "genId",
          "type": "FunctionExpression"
        },
        "vars": {
          "this.idN": "Syntree.Lib.genId#idN",
          "x": "Syntree.Lib.genId~x"
        }
      },
      "description": "Generates a unique id (unique within this session).",
      "see": [
        "Syntree.Lib.allIds",
        "Syntree.Lib.idN"
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "a session-unique id"
        }
      ],
      "name": "genId",
      "longname": "Syntree.Lib.genId",
      "kind": "function",
      "memberof": "Syntree.Lib",
      "scope": "static",
      "___id": "T000002R001068",
      "___s": true
    },
    {
      "comment": "/**\n     * Get the type of anything, taking into account all kinds of JS type weirdness.\n     * Returns undefined for NaN and null. Returns specific object type if available, 'object' otherwise.\n     *\n     * @param {} a - any value\n     * @returns {string} the type of the passed value\n     */",
      "meta": {
        "range": [
          4286,
          5026
        ],
        "filename": "lib.js",
        "lineno": 123,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012360",
          "name": "typeOf",
          "type": "FunctionExpression"
        },
        "vars": {
          "type": "Syntree.Lib.typeOf~type",
          "t": "Syntree.Lib.typeOf~t"
        }
      },
      "description": "Get the type of anything, taking into account all kinds of JS type weirdness.\nReturns undefined for NaN and null. Returns specific object type if available, 'object' otherwise.",
      "params": [
        {
          "description": "any value",
          "name": "a"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the type of the passed value"
        }
      ],
      "name": "typeOf",
      "longname": "Syntree.Lib.typeOf",
      "kind": "function",
      "memberof": "Syntree.Lib",
      "scope": "static",
      "___id": "T000002R001071",
      "___s": true
    },
    {
      "comment": "/**\n     * Check a value against any given type(s).\n     *\n     * @param {} a - any value\n     * @param {string|string[]} required_type - a string representing the required type, or an array of such strings\n     * @returns {boolean} whether the passed value matched the required type(s)\n     */",
      "meta": {
        "range": [
          5332,
          6327
        ],
        "filename": "lib.js",
        "lineno": 149,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012433",
          "name": "checkType",
          "type": "FunctionExpression"
        },
        "vars": {
          "i": "Syntree.Lib.checkType~i",
          "r": "Syntree.Lib.checkType~r"
        }
      },
      "description": "Check a value against any given type(s).",
      "params": [
        {
          "description": "any value",
          "name": "a"
        },
        {
          "type": {
            "names": [
              "string",
              "Array.<string>"
            ]
          },
          "description": "a string representing the required type, or an array of such strings",
          "name": "required_type"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "whether the passed value matched the required type(s)"
        }
      ],
      "name": "checkType",
      "longname": "Syntree.Lib.checkType",
      "kind": "function",
      "memberof": "Syntree.Lib",
      "scope": "static",
      "___id": "T000002R001074",
      "___s": true
    },
    {
      "comment": "/**\n     * Ideal for checking argument types. Checks the passed value against the required type,\n     * and returns the default value instead if the check doesn't pass.\n     * A default value of '#undefined' will permit the type check to fail, and return nothing.\n     * Otherwise (if default_value is actually undefined), will throw an error on type check failure.\n     *\n     * @param {} passed - any value\n     * @param {string|string[]|function} require - a string representing the required type, an array of such strings, or a function returning true/false\n     * @param {} default_value - any value, to be returned if the type check fails\n     */",
      "meta": {
        "range": [
          6991,
          7855
        ],
        "filename": "lib.js",
        "lineno": 184,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012531",
          "name": "checkArg",
          "type": "FunctionExpression"
        }
      },
      "description": "Ideal for checking argument types. Checks the passed value against the required type,\nand returns the default value instead if the check doesn't pass.\nA default value of '#undefined' will permit the type check to fail, and return nothing.\nOtherwise (if default_value is actually undefined), will throw an error on type check failure.",
      "params": [
        {
          "description": "any value",
          "name": "passed"
        },
        {
          "type": {
            "names": [
              "string",
              "Array.<string>",
              "function"
            ]
          },
          "description": "a string representing the required type, an array of such strings, or a function returning true/false",
          "name": "require"
        },
        {
          "description": "any value, to be returned if the type check fails",
          "name": "default_value"
        }
      ],
      "name": "checkArg",
      "longname": "Syntree.Lib.checkArg",
      "kind": "function",
      "memberof": "Syntree.Lib",
      "scope": "static",
      "___id": "T000002R001077",
      "___s": true
    },
    {
      "comment": "/**\n     * Get the distance between two points.\n     *\n     * @param {number|object} x1_or_obj - either the x coordinate of point 1, or an object representing all four coordinates\n     * @param {number} [y1] - the y coordinate of point 1\n     * @param {number} [x2] - the x coordinate of point 2\n     * @param {number} [y2] - the y coordinate of point 2\n     * @returns {number} the distance between the two points\n     */",
      "meta": {
        "range": [
          8289,
          8956
        ],
        "filename": "lib.js",
        "lineno": 213,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012604",
          "name": "distance",
          "type": "FunctionExpression"
        },
        "vars": {
          "x1": "Syntree.Lib.distance~x1",
          "y1": "Syntree.Lib.distance~y1",
          "x2": "Syntree.Lib.distance~x2",
          "y2": "Syntree.Lib.distance~y2"
        }
      },
      "description": "Get the distance between two points.",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "object"
            ]
          },
          "description": "either the x coordinate of point 1, or an object representing all four coordinates",
          "name": "x1_or_obj"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "the y coordinate of point 1",
          "name": "y1"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "the x coordinate of point 2",
          "name": "x2"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "the y coordinate of point 2",
          "name": "y2"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "the distance between the two points"
        }
      ],
      "name": "distance",
      "longname": "Syntree.Lib.distance",
      "kind": "function",
      "memberof": "Syntree.Lib",
      "scope": "static",
      "___id": "T000002R001078",
      "___s": true
    },
    {
      "comment": "/**\n     * Capitalize the first letter of a string.\n     * Often used for converting types into corresponding constructor function identifiers.\n     *\n     * @param {string} string - any string\n     * @returns {string} the passed string, with the first letter capitalized\n     */",
      "meta": {
        "range": [
          9247,
          9356
        ],
        "filename": "lib.js",
        "lineno": 236,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012738",
          "name": "capitalize",
          "type": "FunctionExpression"
        }
      },
      "description": "Capitalize the first letter of a string.\nOften used for converting types into corresponding constructor function identifiers.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "any string",
          "name": "string"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the passed string, with the first letter capitalized"
        }
      ],
      "name": "capitalize",
      "longname": "Syntree.Lib.capitalize",
      "kind": "function",
      "memberof": "Syntree.Lib",
      "scope": "static",
      "___id": "T000002R001087",
      "___s": true
    },
    {
      "comment": "/**\n     * Get the mid point of a line spanning two points\n     *\n     * @param {number|object} x1_or_obj - either the x coordinate of point 1, or an object representing all four coordinates\n     * @param {number} [y1] - the y coordinate of point 1\n     * @param {number} [x2] - the x coordinate of point 2\n     * @param {number} [y2] - the y coordinate of point 2\n     * @returns {object} - the x/y coordinates of the mid point\n     */",
      "meta": {
        "range": [
          9804,
          10490
        ],
        "filename": "lib.js",
        "lineno": 249,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012758",
          "name": "getMidPoint",
          "type": "FunctionExpression"
        },
        "vars": {
          "x1": "Syntree.Lib.getMidPoint~x1",
          "y1": "Syntree.Lib.getMidPoint~y1",
          "x2": "Syntree.Lib.getMidPoint~x2",
          "y2": "Syntree.Lib.getMidPoint~y2"
        }
      },
      "description": "Get the mid point of a line spanning two points",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "object"
            ]
          },
          "description": "either the x coordinate of point 1, or an object representing all four coordinates",
          "name": "x1_or_obj"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "the y coordinate of point 1",
          "name": "y1"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "the x coordinate of point 2",
          "name": "x2"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "the y coordinate of point 2",
          "name": "y2"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "- the x/y coordinates of the mid point"
        }
      ],
      "name": "getMidPoint",
      "longname": "Syntree.Lib.getMidPoint",
      "kind": "function",
      "memberof": "Syntree.Lib",
      "scope": "static",
      "___id": "T000002R001088",
      "___s": true
    },
    {
      "comment": "/**\n     * Take screen/visual coordinates and convert them to data coordinates based on the current transform matrix (from panning).\n     * Basically, remove the effects of the transform matrix from the coordinates.\n     * We need this because user mouse events give coordinates that include the transform, since that's what the user sees.\n     * But we need to set internal coordinates that are based on a non-transformed coordinate field, since the transform matrix is the final layer of presentation, and shouldn't be contained in the lower level of data.\n     *\n     * @param {number|object} x_or_object - the x coordinate, or an object containing the x and y coordinate\n     * @param {number} [y] - the y coordinate\n     * @returns {object} - x and y coordinates after accounting for transform matrix\n     */",
      "meta": {
        "range": [
          11316,
          11841
        ],
        "filename": "lib.js",
        "lineno": 278,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012884",
          "name": "visualToActualCoordinates",
          "type": "FunctionExpression"
        },
        "vars": {
          "x": "Syntree.Lib.visualToActualCoordinates~x",
          "y": "Syntree.Lib.visualToActualCoordinates~y",
          "t": "Syntree.Lib.visualToActualCoordinates~t"
        }
      },
      "description": "Take screen/visual coordinates and convert them to data coordinates based on the current transform matrix (from panning).\nBasically, remove the effects of the transform matrix from the coordinates.\nWe need this because user mouse events give coordinates that include the transform, since that's what the user sees.\nBut we need to set internal coordinates that are based on a non-transformed coordinate field, since the transform matrix is the final layer of presentation, and shouldn't be contained in the lower level of data.",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "object"
            ]
          },
          "description": "the x coordinate, or an object containing the x and y coordinate",
          "name": "x_or_object"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "the y coordinate",
          "name": "y"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "- x and y coordinates after accounting for transform matrix"
        }
      ],
      "name": "visualToActualCoordinates",
      "longname": "Syntree.Lib.visualToActualCoordinates",
      "kind": "function",
      "memberof": "Syntree.Lib",
      "scope": "static",
      "___id": "T000002R001099",
      "___s": true
    },
    {
      "comment": "/**\n     * Extend parent class onto sub class, for instance.\n     *\n     * @param {function} parentConstructor - constructor function for the parent class\n     * @param {function} subConstructor - constructor function for the sub class\n     * @param {object} instance - the object instance being produced by subConstructor\n     */",
      "meta": {
        "range": [
          12183,
          12368
        ],
        "filename": "lib.js",
        "lineno": 304,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100012979",
          "name": "extend",
          "type": "FunctionExpression"
        },
        "vars": {
          "subConstructor.prototype.__proto__": "subConstructor#__proto__"
        }
      },
      "description": "Extend parent class onto sub class, for instance.",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "constructor function for the parent class",
          "name": "parentConstructor"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "constructor function for the sub class",
          "name": "subConstructor"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "the object instance being produced by subConstructor",
          "name": "instance"
        }
      ],
      "name": "extend",
      "longname": "Syntree.Lib.extend",
      "kind": "function",
      "memberof": "Syntree.Lib",
      "scope": "static",
      "___id": "T000002R001109",
      "___s": true
    },
    {
      "comment": "/**\n * @class\n * @classdesc The tutorial object, containing data and methods for running the tutorial.\n */",
      "meta": {
        "range": [
          107,
          8486
        ],
        "filename": "tutorial.js",
        "lineno": 5,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100013273",
          "name": "Syntree.Tutorial",
          "type": "ObjectExpression",
          "value": "{\"data\":\"\",\"standard_message_interval\":2000,\"frames\":\"\",\"index\":\"\",\"running\":false,\"continue\":\"\",\"start\":\"\",\"quit\":\"\",\"frame\":\"\",\"instruction\":\"\"}",
          "paramnames": []
        }
      },
      "kind": "class",
      "classdesc": "The tutorial object, containing data and methods for running the tutorial.",
      "name": "Tutorial",
      "longname": "Syntree.Tutorial",
      "memberof": "Syntree",
      "scope": "static",
      "___id": "T000002R001128",
      "___s": true
    },
    {
      "comment": "/**\n * @class\n * @classdesc Workspace is in charge of taking user input, sanitizing it, and sending it to the appropriate lower-level control structure.\n */",
      "meta": {
        "range": [
          1525,
          22604
        ],
        "filename": "workspace.js",
        "lineno": 46,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100013980",
          "name": "Syntree.Workspace",
          "type": "ObjectExpression",
          "value": "{\"initialize\":\"\",\"_attachEventListeners\":\"\",\"_eventTriangleButtonClick\":\"\",\"_eventBranchClick\":\"\",\"_eventArrowClick\":\"\",\"_eventRewatchTutorial\":\"\",\"_eventUndo\":\"\",\"_eventNodeClick\":\"\",\"_eventLeft\":\"\",\"_eventRight\":\"\",\"_eventUp\":\"\",\"_eventDown\":\"\",\"_eventDel\":\"\",\"_eventEsc\":\"\",\"_eventEditorTyping\":\"\",\"_eventFiletypeLabelClick\":\"\",\"_eventExportImage\":\"\",\"_eventExportTreeFile\":\"\",\"_eventExportBrackets\":\"\",\"_eventEnter\":\"\",\"toString\":\"\",\"_eventFocus\":\"\",\"_eventUnfocus\":\"\",\"_eventBGClick\":\"\",\"_eventUpload\":\"\",\"_eventSave\":\"\"}",
          "paramnames": []
        }
      },
      "kind": "class",
      "classdesc": "Workspace is in charge of taking user input, sanitizing it, and sending it to the appropriate lower-level control structure.",
      "name": "Workspace",
      "longname": "Syntree.Workspace",
      "memberof": "Syntree",
      "scope": "static",
      "___id": "T000002R001232",
      "___s": true
    },
    {
      "comment": "/**\n     * Attach various event listeners needed for processing user input. This function is a convenience only, used so that [initialize()]{@link Workspace.initialize}) is a bit less cluttered.\n     */",
      "meta": {
        "range": [
          3897,
          10586
        ],
        "filename": "workspace.js",
        "lineno": 117,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100014206",
          "name": "_attachEventListeners",
          "type": "FunctionExpression"
        },
        "vars": {
          "": null,
          "window.onblur": "window.onblur"
        }
      },
      "description": "Attach various event listeners needed for processing user input. This function is a convenience only, used so that [initialize()]{@link Workspace.initialize}) is a bit less cluttered.",
      "name": "_attachEventListeners",
      "longname": "Syntree.Workspace._attachEventListeners",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001236",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when a branch's triangle button is clicked.\n     *\n     * @see Syntree.Branch\n     */",
      "meta": {
        "range": [
          10706,
          10996
        ],
        "filename": "workspace.js",
        "lineno": 304,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100014787",
          "name": "_eventTriangleButtonClick",
          "type": "FunctionExpression"
        },
        "vars": {
          "clicked": "Syntree.Workspace._eventTriangleButtonClick~clicked",
          "clickedId": "Syntree.Workspace._eventTriangleButtonClick~clickedId",
          "id": "Syntree.Workspace._eventTriangleButtonClick~id"
        }
      },
      "description": "Code to run when a branch's triangle button is clicked.",
      "see": [
        "Syntree.Branch"
      ],
      "name": "_eventTriangleButtonClick",
      "longname": "Syntree.Workspace._eventTriangleButtonClick",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001242",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when a branch is clicked.\n     *\n     * @see Syntree.Branch\n     * @see Syntree.Page.select\n     */",
      "meta": {
        "range": [
          11130,
          11426
        ],
        "filename": "workspace.js",
        "lineno": 317,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100014839",
          "name": "_eventBranchClick",
          "type": "FunctionExpression"
        },
        "vars": {
          "clicked": "Syntree.Workspace._eventBranchClick~clicked",
          "clickedId": "Syntree.Workspace._eventBranchClick~clickedId",
          "id": "Syntree.Workspace._eventBranchClick~id"
        }
      },
      "description": "Code to run when a branch is clicked.",
      "see": [
        "Syntree.Branch",
        "Syntree.Page.select"
      ],
      "name": "_eventBranchClick",
      "longname": "Syntree.Workspace._eventBranchClick",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001246",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when an arrow is clicked.\n     *\n     * @see Syntree.Arrow\n     * @see Syntree.Page.select\n     */",
      "meta": {
        "range": [
          11559,
          11854
        ],
        "filename": "workspace.js",
        "lineno": 330,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100014896",
          "name": "_eventArrowClick",
          "type": "FunctionExpression"
        },
        "vars": {
          "clicked": "Syntree.Workspace._eventArrowClick~clicked",
          "clickedId": "Syntree.Workspace._eventArrowClick~clickedId",
          "id": "Syntree.Workspace._eventArrowClick~id"
        }
      },
      "description": "Code to run when an arrow is clicked.",
      "see": [
        "Syntree.Arrow",
        "Syntree.Page.select"
      ],
      "name": "_eventArrowClick",
      "longname": "Syntree.Workspace._eventArrowClick",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001250",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when a user requests a tutorial restart/rewatch.\n     *\n     * @see Syntree.Tutorial\n     */",
      "meta": {
        "range": [
          11981,
          12501
        ],
        "filename": "workspace.js",
        "lineno": 342,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100014953",
          "name": "_eventRewatchTutorial",
          "type": "FunctionExpression"
        },
        "vars": {
          "check": "Syntree.Workspace._eventRewatchTutorial~check"
        }
      },
      "description": "Code to run when a user requests a tutorial restart/rewatch.",
      "see": [
        "Syntree.Tutorial"
      ],
      "name": "_eventRewatchTutorial",
      "longname": "Syntree.Workspace._eventRewatchTutorial",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001254",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when a user attempts to undo an action.\n     *\n     * @see Syntree.History.undo\n     * @see Syntree.Action\n     */",
      "meta": {
        "range": [
          12650,
          12712
        ],
        "filename": "workspace.js",
        "lineno": 363,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100015028",
          "name": "_eventUndo",
          "type": "FunctionExpression"
        }
      },
      "description": "Code to run when a user attempts to undo an action.",
      "see": [
        "Syntree.History.undo",
        "Syntree.Action"
      ],
      "name": "_eventUndo",
      "longname": "Syntree.Workspace._eventUndo",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001258",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when a Node is clicked.\n     *\n     * @see Syntree.Node\n     */",
      "meta": {
        "range": [
          12810,
          13308
        ],
        "filename": "workspace.js",
        "lineno": 372,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100015038",
          "name": "_eventNodeClick",
          "type": "FunctionExpression"
        },
        "vars": {
          "node": "Syntree.Workspace._eventNodeClick~node",
          "a": "Syntree.Workspace._eventNodeClick~a"
        }
      },
      "description": "Code to run when a Node is clicked.",
      "see": [
        "Syntree.Node"
      ],
      "name": "_eventNodeClick",
      "longname": "Syntree.Workspace._eventNodeClick",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001259",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when the user presses the left arrow key.\n     *\n     * @see Syntree.Page#navigateHorizontal\n     */",
      "meta": {
        "range": [
          13443,
          13790
        ],
        "filename": "workspace.js",
        "lineno": 390,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100015115",
          "name": "_eventLeft",
          "type": "FunctionExpression"
        }
      },
      "description": "Code to run when the user presses the left arrow key.",
      "see": [
        "Syntree.Page#navigateHorizontal"
      ],
      "name": "_eventLeft",
      "longname": "Syntree.Workspace._eventLeft",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001262",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when the user presses the right arrow key.\n     *\n     * @see Syntree.Page#navigateHorizontal\n     */",
      "meta": {
        "range": [
          13926,
          14276
        ],
        "filename": "workspace.js",
        "lineno": 406,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100015169",
          "name": "_eventRight",
          "type": "FunctionExpression"
        }
      },
      "description": "Code to run when the user presses the right arrow key.",
      "see": [
        "Syntree.Page#navigateHorizontal"
      ],
      "name": "_eventRight",
      "longname": "Syntree.Workspace._eventRight",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001263",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when the user presses the up arrow key.\n     *\n     * @see Syntree.Page#navigateUp\n     */",
      "meta": {
        "range": [
          14401,
          14461
        ],
        "filename": "workspace.js",
        "lineno": 422,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100015223",
          "name": "_eventUp",
          "type": "FunctionExpression"
        }
      },
      "description": "Code to run when the user presses the up arrow key.",
      "see": [
        "Syntree.Page#navigateUp"
      ],
      "name": "_eventUp",
      "longname": "Syntree.Workspace._eventUp",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001264",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when the user presses the down arrow key.\n     *\n     * @see Syntree.Page#navigateDown\n     */",
      "meta": {
        "range": [
          14590,
          14655
        ],
        "filename": "workspace.js",
        "lineno": 431,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100015233",
          "name": "_eventDown",
          "type": "FunctionExpression"
        }
      },
      "description": "Code to run when the user presses the down arrow key.",
      "see": [
        "Syntree.Page#navigateDown"
      ],
      "name": "_eventDown",
      "longname": "Syntree.Workspace._eventDown",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001265",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when the user tries to delete an [Element]{@link Syntree.Element}.\n     */",
      "meta": {
        "range": [
          14764,
          15840
        ],
        "filename": "workspace.js",
        "lineno": 438,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100015244",
          "name": "_eventDel",
          "type": "FunctionExpression"
        },
        "vars": {
          "selected": "Syntree.Workspace._eventDel~selected",
          "children": "Syntree.Workspace._eventDel~children",
          "c": "Syntree.Workspace._eventDel~c",
          "tree": "Syntree.Workspace._eventDel~tree"
        }
      },
      "description": "Code to run when the user tries to delete an [Element]{@link Syntree.Element}.",
      "name": "_eventDel",
      "longname": "Syntree.Workspace._eventDel",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001266",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when the user presses the ESC key.\n     */",
      "meta": {
        "range": [
          15917,
          15987
        ],
        "filename": "workspace.js",
        "lineno": 469,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100015408",
          "name": "_eventEsc",
          "type": "FunctionExpression"
        }
      },
      "description": "Code to run when the user presses the ESC key.",
      "name": "_eventEsc",
      "longname": "Syntree.Workspace._eventEsc",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001274",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when the user types in a [Node]{@link Syntree.Node} editor.\n     */",
      "meta": {
        "range": [
          16089,
          16168
        ],
        "filename": "workspace.js",
        "lineno": 476,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100015419",
          "name": "_eventEditorTyping",
          "type": "FunctionExpression"
        }
      },
      "description": "Code to run when the user types in a [Node]{@link Syntree.Node} editor.",
      "name": "_eventEditorTyping",
      "longname": "Syntree.Workspace._eventEditorTyping",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001275",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when the user clicks a file type option in the export modal.\n     * Updates the displayed file suffix.\n     */",
      "meta": {
        "range": [
          16313,
          16752
        ],
        "filename": "workspace.js",
        "lineno": 484,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100015430",
          "name": "_eventFiletypeLabelClick",
          "type": "FunctionExpression"
        },
        "vars": {
          "clicked": "Syntree.Workspace._eventFiletypeLabelClick~clicked"
        }
      },
      "description": "Code to run when the user clicks a file type option in the export modal.\nUpdates the displayed file suffix.",
      "name": "_eventFiletypeLabelClick",
      "longname": "Syntree.Workspace._eventFiletypeLabelClick",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001276",
      "___s": true
    },
    {
      "comment": "/**\n     * Code for exporting the current tree as an image (png).\n     */",
      "meta": {
        "range": [
          16837,
          18004
        ],
        "filename": "workspace.js",
        "lineno": 498,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100015500",
          "name": "_eventExportImage",
          "type": "FunctionExpression"
        },
        "vars": {
          "path": "Syntree.Workspace._eventExportImage~path",
          "width": "Syntree.Workspace._eventExportImage~width",
          "height": "Syntree.Workspace._eventExportImage~height",
          "offsetX": "Syntree.Workspace._eventExportImage~offsetX",
          "offsetY": "Syntree.Workspace._eventExportImage~offsetY",
          "svgstring": "Syntree.Workspace._eventExportImage~svgstring",
          "canvas": "Syntree.Workspace._eventExportImage~canvas",
          "imgd": "Syntree.Workspace._eventExportImage~imgd",
          "link": "Syntree.Workspace._eventExportImage~link"
        }
      },
      "description": "Code for exporting the current tree as an image (png).",
      "name": "_eventExportImage",
      "longname": "Syntree.Workspace._eventExportImage",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001278",
      "___s": true
    },
    {
      "comment": "/**\n     * Code for exporting the current tree as a tree file.\n     */",
      "meta": {
        "range": [
          18086,
          18603
        ],
        "filename": "workspace.js",
        "lineno": 532,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100015658",
          "name": "_eventExportTreeFile",
          "type": "FunctionExpression"
        },
        "vars": {
          "fname": "Syntree.Workspace._eventExportTreeFile~fname",
          "treestring": "Syntree.Workspace._eventExportTreeFile~treestring",
          "": null
        }
      },
      "description": "Code for exporting the current tree as a tree file.",
      "name": "_eventExportTreeFile",
      "longname": "Syntree.Workspace._eventExportTreeFile",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001290",
      "___s": true
    },
    {
      "comment": "/**\n     * Code for exporting the current tree as bracket notation (.txt file).\n     */",
      "meta": {
        "range": [
          18702,
          19364
        ],
        "filename": "workspace.js",
        "lineno": 548,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100015735",
          "name": "_eventExportBrackets",
          "type": "FunctionExpression"
        },
        "vars": {
          "fname": "Syntree.Workspace._eventExportBrackets~fname",
          "brackets": "Syntree.Workspace._eventExportBrackets~brackets",
          "": null
        }
      },
      "description": "Code for exporting the current tree as bracket notation (.txt file).",
      "name": "_eventExportBrackets",
      "longname": "Syntree.Workspace._eventExportBrackets",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001296",
      "___s": true
    },
    {
      "comment": "/**\n     * Code to run when the user presses Enter.\n     */",
      "meta": {
        "range": [
          19435,
          19507
        ],
        "filename": "workspace.js",
        "lineno": 568,
        "path": "/var/www/html/syntree/app/singletons",
        "code": {
          "id": "astnode100015826",
          "name": "_eventEnter",
          "type": "FunctionExpression"
        }
      },
      "description": "Code to run when the user presses Enter.",
      "name": "_eventEnter",
      "longname": "Syntree.Workspace._eventEnter",
      "kind": "function",
      "memberof": "Syntree.Workspace",
      "scope": "static",
      "___id": "T000002R001302",
      "___s": true
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "/var/www/html/syntree/app/classes/action.js",
        "/var/www/html/syntree/app/classes/elements/arrow.js",
        "/var/www/html/syntree/app/classes/elements/branch.js",
        "/var/www/html/syntree/app/classes/elements/element.js",
        "/var/www/html/syntree/app/classes/elements/graphic.js",
        "/var/www/html/syntree/app/classes/elements/node.js",
        "/var/www/html/syntree/app/classes/elements/selectableElement.js",
        "/var/www/html/syntree/app/classes/page.js",
        "/var/www/html/syntree/app/classes/tree.js",
        "/var/www/html/syntree/app/singletons/history.js",
        "/var/www/html/syntree/app/singletons/lib.js",
        "/var/www/html/syntree/app/singletons/toolbar.js",
        "/var/www/html/syntree/app/singletons/tutorial.js",
        "/var/www/html/syntree/app/singletons/workspace.js"
      ],
      "___id": "T000002R001325",
      "___s": true
    },
    {
      "comment": "/**\n         * A session-unique id.\n         * @type {number}\n         */",
      "meta": {
        "range": [
          490,
          519
        ],
        "filename": "element.js",
        "lineno": 13,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003537",
          "name": "this.id",
          "type": "CallExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "A session-unique id.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "id",
      "longname": "Syntree.SelectableElement#id",
      "kind": "member",
      "memberof": "Syntree.SelectableElement",
      "scope": "instance",
      "inherits": "Syntree.Element#id",
      "inherited": true,
      "___id": "T000002R001326",
      "___s": true
    },
    {
      "comment": "/**\n     * Whether or not this element is selectable.\n     * Selectable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n     *\n     * @see Syntree.Element#isSelectable\n     */",
      "meta": {
        "range": [
          722,
          745
        ],
        "filename": "element.js",
        "lineno": 22,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003548",
          "name": "this.selectable",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Whether or not this element is selectable.\nSelectable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.",
      "see": [
        "Syntree.Element#isSelectable"
      ],
      "name": "selectable",
      "longname": "Syntree.SelectableElement#selectable",
      "kind": "member",
      "memberof": "Syntree.SelectableElement",
      "scope": "instance",
      "inherits": "Syntree.Element#selectable",
      "inherited": true,
      "overrides": "Syntree.Element#selectable",
      "___id": "T000002R001327",
      "___s": true
    },
    {
      "comment": "/**\n     * Whether or not this element has been deleted.\n     * Needed to avoid double deletion.\n     *\n     * @type {boolean}\n     */",
      "meta": {
        "range": [
          891,
          911
        ],
        "filename": "element.js",
        "lineno": 30,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003554",
          "name": "this.deleted",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Whether or not this element has been deleted.\nNeeded to avoid double deletion.",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "deleted",
      "longname": "Syntree.SelectableElement#deleted",
      "kind": "member",
      "memberof": "Syntree.SelectableElement",
      "scope": "instance",
      "inherits": "Syntree.Element#deleted",
      "inherited": true,
      "___id": "T000002R001328",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property deleted.\n *\n * @returns {boolean} whether or not the element is deleted\n * @see Syntree.Element.deleted;\n */",
      "meta": {
        "range": [
          1221,
          1298
        ],
        "filename": "element.js",
        "lineno": 45,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003575",
          "name": "Syntree.Element.prototype.isDeleted",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property deleted.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "whether or not the element is deleted"
        }
      ],
      "see": [
        "Syntree.Element.deleted;"
      ],
      "name": "isDeleted",
      "longname": "Syntree.SelectableElement#isDeleted",
      "kind": "function",
      "memberof": "Syntree.SelectableElement",
      "scope": "instance",
      "inherits": "Syntree.Element#isDeleted",
      "inherited": true,
      "___id": "T000002R001329",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property selectable.\n *\n * @returns {boolean} whether or not the element is selectable\n * @see Syntree.Element#selectable\n */",
      "meta": {
        "range": [
          1455,
          1538
        ],
        "filename": "element.js",
        "lineno": 55,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003590",
          "name": "Syntree.Element.prototype.isSelectable",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property selectable.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "whether or not the element is selectable"
        }
      ],
      "see": [
        "Syntree.Element#selectable"
      ],
      "name": "isSelectable",
      "longname": "Syntree.SelectableElement#isSelectable",
      "kind": "function",
      "memberof": "Syntree.SelectableElement",
      "scope": "instance",
      "inherits": "Syntree.Element#isSelectable",
      "inherited": true,
      "___id": "T000002R001330",
      "___s": true
    },
    {
      "comment": "/**\n * Delete the element.\n * Removes graphical elements, deregisters from Syntree.Workspace.page, and sets deleted property to true.\n * Extend in sub-classes with '__delete()'.\n *\n * @see Syntree.Element#deleted\n * @see Syntree.Element#isDeleted\n */",
      "meta": {
        "range": [
          1831,
          2114
        ],
        "filename": "element.js",
        "lineno": 68,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003605",
          "name": "Syntree.Element.prototype.delete",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.deleted": "Syntree.Element#deleted"
        }
      },
      "description": "Delete the element.\nRemoves graphical elements, deregisters from Syntree.Workspace.page, and sets deleted property to true.\nExtend in sub-classes with '__delete()'.",
      "see": [
        "Syntree.Element#deleted",
        "Syntree.Element#isDeleted"
      ],
      "name": "delete",
      "longname": "Syntree.SelectableElement#delete",
      "kind": "function",
      "memberof": "Syntree.SelectableElement",
      "scope": "instance",
      "inherits": "Syntree.Element#delete",
      "inherited": true,
      "___id": "T000002R001331",
      "___s": true
    },
    {
      "comment": "/**\n * Update the elements graphical representation.\n * Mostly serves as a wrapper for Syntree.Graphic.update.\n * Extend in sub-classes with '__updateGraphics()'.\n *\n * @see Syntree.Graphic\n */",
      "meta": {
        "range": [
          2310,
          2505
        ],
        "filename": "element.js",
        "lineno": 87,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003662",
          "name": "Syntree.Element.prototype.updateGraphics",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Update the elements graphical representation.\nMostly serves as a wrapper for Syntree.Graphic.update.\nExtend in sub-classes with '__updateGraphics()'.",
      "see": [
        "Syntree.Graphic"
      ],
      "name": "updateGraphics",
      "longname": "Syntree.SelectableElement#updateGraphics",
      "kind": "function",
      "memberof": "Syntree.SelectableElement",
      "scope": "instance",
      "inherits": "Syntree.Element#updateGraphics",
      "inherited": true,
      "___id": "T000002R001332",
      "___s": true
    },
    {
      "comment": "/**\n * Whether or not this object is an element.\n * Elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n *\n * @returns {boolean}\n */",
      "meta": {
        "range": [
          2646,
          2715
        ],
        "filename": "element.js",
        "lineno": 100,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003698",
          "name": "Syntree.Element.prototype.isElement",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Whether or not this object is an element.\nElements are Syntree.Node, Syntree.Branch, Syntree.Arrow.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isElement",
      "longname": "Syntree.SelectableElement#isElement",
      "kind": "function",
      "memberof": "Syntree.SelectableElement",
      "scope": "instance",
      "inherits": "Syntree.Element#isElement",
      "inherited": true,
      "___id": "T000002R001333",
      "___s": true
    },
    {
      "comment": "/**\n * Whether or not this element is deletable.\n * Deletable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n * Syntree.Branch should never be deletable directly by the user.\n * Branches should only be deleted automatically when their child node is deleted.\n *\n * @see Syntree.Node.__delete\n * @returns {boolean}\n */",
      "meta": {
        "range": [
          3045,
          3116
        ],
        "filename": "element.js",
        "lineno": 113,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003711",
          "name": "Syntree.Element.prototype.isDeletable",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Whether or not this element is deletable.\nDeletable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\nSyntree.Branch should never be deletable directly by the user.\nBranches should only be deleted automatically when their child node is deleted.",
      "see": [
        "Syntree.Node.__delete"
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isDeletable",
      "longname": "Syntree.SelectableElement#isDeletable",
      "kind": "function",
      "memberof": "Syntree.SelectableElement",
      "scope": "instance",
      "inherits": "Syntree.Element#isDeletable",
      "inherited": true,
      "___id": "T000002R001334",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property id.\n * @returns {number} the id of the element\n * @see Syntree.Element.id\n */",
      "meta": {
        "range": [
          3234,
          3302
        ],
        "filename": "element.js",
        "lineno": 122,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003724",
          "name": "Syntree.Element.prototype.getId",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property id.",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "the id of the element"
        }
      ],
      "see": [
        "Syntree.Element.id"
      ],
      "name": "getId",
      "longname": "Syntree.SelectableElement#getId",
      "kind": "function",
      "memberof": "Syntree.SelectableElement",
      "scope": "instance",
      "inherits": "Syntree.Element#getId",
      "inherited": true,
      "___id": "T000002R001335",
      "___s": true
    },
    {
      "comment": "/**\n         * A session-unique id.\n         * @type {number}\n         */",
      "meta": {
        "range": [
          490,
          519
        ],
        "filename": "element.js",
        "lineno": 13,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003537",
          "name": "this.id",
          "type": "CallExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "A session-unique id.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "id",
      "longname": "Syntree.Arrow#id",
      "kind": "member",
      "memberof": "Syntree.Arrow",
      "scope": "instance",
      "inherits": "Syntree.Element#id",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#id",
      "___id": "T000002R001336",
      "___s": true
    },
    {
      "comment": "/**\n     * Whether or not this element is selectable.\n     * Selectable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n     *\n     * @see Syntree.Element#isSelectable\n     */",
      "meta": {
        "range": [
          722,
          745
        ],
        "filename": "element.js",
        "lineno": 22,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003548",
          "name": "this.selectable",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Whether or not this element is selectable.\nSelectable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.",
      "see": [
        "Syntree.Element#isSelectable"
      ],
      "name": "selectable",
      "longname": "Syntree.Arrow#selectable",
      "kind": "member",
      "memberof": "Syntree.Arrow",
      "scope": "instance",
      "inherits": "Syntree.Element#selectable",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#selectable",
      "___id": "T000002R001337",
      "___s": true
    },
    {
      "comment": "/**\n     * Whether or not this element has been deleted.\n     * Needed to avoid double deletion.\n     *\n     * @type {boolean}\n     */",
      "meta": {
        "range": [
          891,
          911
        ],
        "filename": "element.js",
        "lineno": 30,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003554",
          "name": "this.deleted",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Whether or not this element has been deleted.\nNeeded to avoid double deletion.",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "deleted",
      "longname": "Syntree.Arrow#deleted",
      "kind": "member",
      "memberof": "Syntree.Arrow",
      "scope": "instance",
      "inherits": "Syntree.Element#deleted",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#deleted",
      "___id": "T000002R001338",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property deleted.\n *\n * @returns {boolean} whether or not the element is deleted\n * @see Syntree.Element.deleted;\n */",
      "meta": {
        "range": [
          1221,
          1298
        ],
        "filename": "element.js",
        "lineno": 45,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003575",
          "name": "Syntree.Element.prototype.isDeleted",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property deleted.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "whether or not the element is deleted"
        }
      ],
      "see": [
        "Syntree.Element.deleted;"
      ],
      "name": "isDeleted",
      "longname": "Syntree.Arrow#isDeleted",
      "kind": "function",
      "memberof": "Syntree.Arrow",
      "scope": "instance",
      "inherits": "Syntree.Element#isDeleted",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#isDeleted",
      "___id": "T000002R001339",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property selectable.\n *\n * @returns {boolean} whether or not the element is selectable\n * @see Syntree.Element#selectable\n */",
      "meta": {
        "range": [
          1455,
          1538
        ],
        "filename": "element.js",
        "lineno": 55,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003590",
          "name": "Syntree.Element.prototype.isSelectable",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property selectable.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "whether or not the element is selectable"
        }
      ],
      "see": [
        "Syntree.Element#selectable"
      ],
      "name": "isSelectable",
      "longname": "Syntree.Arrow#isSelectable",
      "kind": "function",
      "memberof": "Syntree.Arrow",
      "scope": "instance",
      "inherits": "Syntree.Element#isSelectable",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#isSelectable",
      "___id": "T000002R001340",
      "___s": true
    },
    {
      "comment": "/**\n * Delete the element.\n * Removes graphical elements, deregisters from Syntree.Workspace.page, and sets deleted property to true.\n * Extend in sub-classes with '__delete()'.\n *\n * @see Syntree.Element#deleted\n * @see Syntree.Element#isDeleted\n */",
      "meta": {
        "range": [
          1831,
          2114
        ],
        "filename": "element.js",
        "lineno": 68,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003605",
          "name": "Syntree.Element.prototype.delete",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.deleted": "Syntree.Element#deleted"
        }
      },
      "description": "Delete the element.\nRemoves graphical elements, deregisters from Syntree.Workspace.page, and sets deleted property to true.\nExtend in sub-classes with '__delete()'.",
      "see": [
        "Syntree.Element#deleted",
        "Syntree.Element#isDeleted"
      ],
      "name": "delete",
      "longname": "Syntree.Arrow#delete",
      "kind": "function",
      "memberof": "Syntree.Arrow",
      "scope": "instance",
      "inherits": "Syntree.Element#delete",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#delete",
      "___id": "T000002R001341",
      "___s": true
    },
    {
      "comment": "/**\n * Update the elements graphical representation.\n * Mostly serves as a wrapper for Syntree.Graphic.update.\n * Extend in sub-classes with '__updateGraphics()'.\n *\n * @see Syntree.Graphic\n */",
      "meta": {
        "range": [
          2310,
          2505
        ],
        "filename": "element.js",
        "lineno": 87,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003662",
          "name": "Syntree.Element.prototype.updateGraphics",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Update the elements graphical representation.\nMostly serves as a wrapper for Syntree.Graphic.update.\nExtend in sub-classes with '__updateGraphics()'.",
      "see": [
        "Syntree.Graphic"
      ],
      "name": "updateGraphics",
      "longname": "Syntree.Arrow#updateGraphics",
      "kind": "function",
      "memberof": "Syntree.Arrow",
      "scope": "instance",
      "inherits": "Syntree.Element#updateGraphics",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#updateGraphics",
      "___id": "T000002R001342",
      "___s": true
    },
    {
      "comment": "/**\n * Whether or not this object is an element.\n * Elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n *\n * @returns {boolean}\n */",
      "meta": {
        "range": [
          2646,
          2715
        ],
        "filename": "element.js",
        "lineno": 100,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003698",
          "name": "Syntree.Element.prototype.isElement",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Whether or not this object is an element.\nElements are Syntree.Node, Syntree.Branch, Syntree.Arrow.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isElement",
      "longname": "Syntree.Arrow#isElement",
      "kind": "function",
      "memberof": "Syntree.Arrow",
      "scope": "instance",
      "inherits": "Syntree.Element#isElement",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#isElement",
      "___id": "T000002R001343",
      "___s": true
    },
    {
      "comment": "/**\n * Whether or not this element is deletable.\n * Deletable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n * Syntree.Branch should never be deletable directly by the user.\n * Branches should only be deleted automatically when their child node is deleted.\n *\n * @see Syntree.Node.__delete\n * @returns {boolean}\n */",
      "meta": {
        "range": [
          3045,
          3116
        ],
        "filename": "element.js",
        "lineno": 113,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003711",
          "name": "Syntree.Element.prototype.isDeletable",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Whether or not this element is deletable.\nDeletable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\nSyntree.Branch should never be deletable directly by the user.\nBranches should only be deleted automatically when their child node is deleted.",
      "see": [
        "Syntree.Node.__delete"
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isDeletable",
      "longname": "Syntree.Arrow#isDeletable",
      "kind": "function",
      "memberof": "Syntree.Arrow",
      "scope": "instance",
      "inherits": "Syntree.Element#isDeletable",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#isDeletable",
      "___id": "T000002R001344",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property id.\n * @returns {number} the id of the element\n * @see Syntree.Element.id\n */",
      "meta": {
        "range": [
          3234,
          3302
        ],
        "filename": "element.js",
        "lineno": 122,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003724",
          "name": "Syntree.Element.prototype.getId",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property id.",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "the id of the element"
        }
      ],
      "see": [
        "Syntree.Element.id"
      ],
      "name": "getId",
      "longname": "Syntree.Arrow#getId",
      "kind": "function",
      "memberof": "Syntree.Arrow",
      "scope": "instance",
      "inherits": "Syntree.Element#getId",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#getId",
      "___id": "T000002R001345",
      "___s": true
    },
    {
      "comment": "/**\n     * Whether or not this element is selected.\n     *\n     * @type {boolean}\n     * @see Syntree.SelectableElement#isSelected\n     * @see Syntree.SelectableElement#select\n     */",
      "meta": {
        "range": [
          621,
          642
        ],
        "filename": "selectableElement.js",
        "lineno": 18,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100006965",
          "name": "this.selected",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Whether or not this element is selected.",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "see": [
        "Syntree.SelectableElement#isSelected",
        "Syntree.SelectableElement#select"
      ],
      "name": "selected",
      "longname": "Syntree.Arrow#selected",
      "kind": "member",
      "memberof": "Syntree.Arrow",
      "scope": "instance",
      "inherits": "Syntree.SelectableElement#selected",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#selected",
      "___id": "T000002R001346",
      "___s": true
    },
    {
      "comment": "/**\n * Select the element.\n * Controls the appearance and behavior of <strong>this element only</strong>.\n * Deselecting previously selected element and other overarching management is handled by Syntree.Page.\n *\n * @see Syntree.SelectableElement#isSelected\n * @see Syntree.SelectableElement#selected\n * @see Syntree.Page\n */",
      "meta": {
        "range": [
          972,
          1217
        ],
        "filename": "selectableElement.js",
        "lineno": 29,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100006971",
          "name": "Syntree.SelectableElement.prototype.select",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.selected": "Syntree.SelectableElement#selected"
        }
      },
      "description": "Select the element.\nControls the appearance and behavior of <strong>this element only</strong>.\nDeselecting previously selected element and other overarching management is handled by Syntree.Page.",
      "see": [
        "Syntree.SelectableElement#isSelected",
        "Syntree.SelectableElement#selected",
        "Syntree.Page"
      ],
      "name": "select",
      "longname": "Syntree.Arrow#select",
      "kind": "function",
      "memberof": "Syntree.Arrow",
      "scope": "instance",
      "inherits": "Syntree.SelectableElement#select",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#select",
      "___id": "T000002R001347",
      "___s": true
    },
    {
      "comment": "/**\n * Deselect the element.\n * Controls the appearance and behavior of <strong>this element only</strong>.\n * Other overarching management is handled by Syntree.Page.\n *\n * @see Syntree.SelectableElement#isSelected\n * @see Syntree.SelectableElement#selected\n * @see Syntree.Page\n */",
      "meta": {
        "range": [
          1503,
          1755
        ],
        "filename": "selectableElement.js",
        "lineno": 47,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100007019",
          "name": "Syntree.SelectableElement.prototype.deselect",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.selected": "Syntree.SelectableElement#selected"
        }
      },
      "description": "Deselect the element.\nControls the appearance and behavior of <strong>this element only</strong>.\nOther overarching management is handled by Syntree.Page.",
      "see": [
        "Syntree.SelectableElement#isSelected",
        "Syntree.SelectableElement#selected",
        "Syntree.Page"
      ],
      "name": "deselect",
      "longname": "Syntree.Arrow#deselect",
      "kind": "function",
      "memberof": "Syntree.Arrow",
      "scope": "instance",
      "inherits": "Syntree.SelectableElement#deselect",
      "inherited": true,
      "___id": "T000002R001348",
      "___s": true
    },
    {
      "comment": "/**\n         * A session-unique id.\n         * @type {number}\n         */",
      "meta": {
        "range": [
          490,
          519
        ],
        "filename": "element.js",
        "lineno": 13,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003537",
          "name": "this.id",
          "type": "CallExpression",
          "value": "",
          "paramnames": []
        }
      },
      "description": "A session-unique id.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "id",
      "longname": "Syntree.Branch#id",
      "kind": "member",
      "memberof": "Syntree.Branch",
      "scope": "instance",
      "inherits": "Syntree.Element#id",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#id",
      "___id": "T000002R001349",
      "___s": true
    },
    {
      "comment": "/**\n     * Whether or not this element is selectable.\n     * Selectable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n     *\n     * @see Syntree.Element#isSelectable\n     */",
      "meta": {
        "range": [
          722,
          745
        ],
        "filename": "element.js",
        "lineno": 22,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003548",
          "name": "this.selectable",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Whether or not this element is selectable.\nSelectable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.",
      "see": [
        "Syntree.Element#isSelectable"
      ],
      "name": "selectable",
      "longname": "Syntree.Branch#selectable",
      "kind": "member",
      "memberof": "Syntree.Branch",
      "scope": "instance",
      "inherits": "Syntree.Element#selectable",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#selectable",
      "___id": "T000002R001350",
      "___s": true
    },
    {
      "comment": "/**\n     * Whether or not this element has been deleted.\n     * Needed to avoid double deletion.\n     *\n     * @type {boolean}\n     */",
      "meta": {
        "range": [
          891,
          911
        ],
        "filename": "element.js",
        "lineno": 30,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003554",
          "name": "this.deleted",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Whether or not this element has been deleted.\nNeeded to avoid double deletion.",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "deleted",
      "longname": "Syntree.Branch#deleted",
      "kind": "member",
      "memberof": "Syntree.Branch",
      "scope": "instance",
      "inherits": "Syntree.Element#deleted",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#deleted",
      "___id": "T000002R001351",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property deleted.\n *\n * @returns {boolean} whether or not the element is deleted\n * @see Syntree.Element.deleted;\n */",
      "meta": {
        "range": [
          1221,
          1298
        ],
        "filename": "element.js",
        "lineno": 45,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003575",
          "name": "Syntree.Element.prototype.isDeleted",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property deleted.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "whether or not the element is deleted"
        }
      ],
      "see": [
        "Syntree.Element.deleted;"
      ],
      "name": "isDeleted",
      "longname": "Syntree.Branch#isDeleted",
      "kind": "function",
      "memberof": "Syntree.Branch",
      "scope": "instance",
      "inherits": "Syntree.Element#isDeleted",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#isDeleted",
      "___id": "T000002R001352",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property selectable.\n *\n * @returns {boolean} whether or not the element is selectable\n * @see Syntree.Element#selectable\n */",
      "meta": {
        "range": [
          1455,
          1538
        ],
        "filename": "element.js",
        "lineno": 55,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003590",
          "name": "Syntree.Element.prototype.isSelectable",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property selectable.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "whether or not the element is selectable"
        }
      ],
      "see": [
        "Syntree.Element#selectable"
      ],
      "name": "isSelectable",
      "longname": "Syntree.Branch#isSelectable",
      "kind": "function",
      "memberof": "Syntree.Branch",
      "scope": "instance",
      "inherits": "Syntree.Element#isSelectable",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#isSelectable",
      "___id": "T000002R001353",
      "___s": true
    },
    {
      "comment": "/**\n * Delete the element.\n * Removes graphical elements, deregisters from Syntree.Workspace.page, and sets deleted property to true.\n * Extend in sub-classes with '__delete()'.\n *\n * @see Syntree.Element#deleted\n * @see Syntree.Element#isDeleted\n */",
      "meta": {
        "range": [
          1831,
          2114
        ],
        "filename": "element.js",
        "lineno": 68,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003605",
          "name": "Syntree.Element.prototype.delete",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.deleted": "Syntree.Element#deleted"
        }
      },
      "description": "Delete the element.\nRemoves graphical elements, deregisters from Syntree.Workspace.page, and sets deleted property to true.\nExtend in sub-classes with '__delete()'.",
      "see": [
        "Syntree.Element#deleted",
        "Syntree.Element#isDeleted"
      ],
      "name": "delete",
      "longname": "Syntree.Branch#delete",
      "kind": "function",
      "memberof": "Syntree.Branch",
      "scope": "instance",
      "inherits": "Syntree.Element#delete",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#delete",
      "___id": "T000002R001354",
      "___s": true
    },
    {
      "comment": "/**\n * Update the elements graphical representation.\n * Mostly serves as a wrapper for Syntree.Graphic.update.\n * Extend in sub-classes with '__updateGraphics()'.\n *\n * @see Syntree.Graphic\n */",
      "meta": {
        "range": [
          2310,
          2505
        ],
        "filename": "element.js",
        "lineno": 87,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003662",
          "name": "Syntree.Element.prototype.updateGraphics",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Update the elements graphical representation.\nMostly serves as a wrapper for Syntree.Graphic.update.\nExtend in sub-classes with '__updateGraphics()'.",
      "see": [
        "Syntree.Graphic"
      ],
      "name": "updateGraphics",
      "longname": "Syntree.Branch#updateGraphics",
      "kind": "function",
      "memberof": "Syntree.Branch",
      "scope": "instance",
      "inherits": "Syntree.Element#updateGraphics",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#updateGraphics",
      "___id": "T000002R001355",
      "___s": true
    },
    {
      "comment": "/**\n * Whether or not this object is an element.\n * Elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n *\n * @returns {boolean}\n */",
      "meta": {
        "range": [
          2646,
          2715
        ],
        "filename": "element.js",
        "lineno": 100,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003698",
          "name": "Syntree.Element.prototype.isElement",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Whether or not this object is an element.\nElements are Syntree.Node, Syntree.Branch, Syntree.Arrow.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isElement",
      "longname": "Syntree.Branch#isElement",
      "kind": "function",
      "memberof": "Syntree.Branch",
      "scope": "instance",
      "inherits": "Syntree.Element#isElement",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#isElement",
      "___id": "T000002R001356",
      "___s": true
    },
    {
      "comment": "/**\n * Whether or not this element is deletable.\n * Deletable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n * Syntree.Branch should never be deletable directly by the user.\n * Branches should only be deleted automatically when their child node is deleted.\n *\n * @see Syntree.Node.__delete\n * @returns {boolean}\n */",
      "meta": {
        "range": [
          3045,
          3116
        ],
        "filename": "element.js",
        "lineno": 113,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003711",
          "name": "Syntree.Element.prototype.isDeletable",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Whether or not this element is deletable.\nDeletable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\nSyntree.Branch should never be deletable directly by the user.\nBranches should only be deleted automatically when their child node is deleted.",
      "see": [
        "Syntree.Node.__delete"
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isDeletable",
      "longname": "Syntree.Branch#isDeletable",
      "kind": "function",
      "memberof": "Syntree.Branch",
      "scope": "instance",
      "inherits": "Syntree.Element#isDeletable",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#isDeletable",
      "___id": "T000002R001357",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property id.\n * @returns {number} the id of the element\n * @see Syntree.Element.id\n */",
      "meta": {
        "range": [
          3234,
          3302
        ],
        "filename": "element.js",
        "lineno": 122,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003724",
          "name": "Syntree.Element.prototype.getId",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property id.",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "the id of the element"
        }
      ],
      "see": [
        "Syntree.Element.id"
      ],
      "name": "getId",
      "longname": "Syntree.Branch#getId",
      "kind": "function",
      "memberof": "Syntree.Branch",
      "scope": "instance",
      "inherits": "Syntree.Element#getId",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#getId",
      "___id": "T000002R001358",
      "___s": true
    },
    {
      "comment": "/**\n     * Whether or not this element is selected.\n     *\n     * @type {boolean}\n     * @see Syntree.SelectableElement#isSelected\n     * @see Syntree.SelectableElement#select\n     */",
      "meta": {
        "range": [
          621,
          642
        ],
        "filename": "selectableElement.js",
        "lineno": 18,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100006965",
          "name": "this.selected",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Whether or not this element is selected.",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "see": [
        "Syntree.SelectableElement#isSelected",
        "Syntree.SelectableElement#select"
      ],
      "name": "selected",
      "longname": "Syntree.Branch#selected",
      "kind": "member",
      "memberof": "Syntree.Branch",
      "scope": "instance",
      "inherits": "Syntree.SelectableElement#selected",
      "inherited": true,
      "___id": "T000002R001359",
      "___s": true
    },
    {
      "comment": "/**\n * Select the element.\n * Controls the appearance and behavior of <strong>this element only</strong>.\n * Deselecting previously selected element and other overarching management is handled by Syntree.Page.\n *\n * @see Syntree.SelectableElement#isSelected\n * @see Syntree.SelectableElement#selected\n * @see Syntree.Page\n */",
      "meta": {
        "range": [
          972,
          1217
        ],
        "filename": "selectableElement.js",
        "lineno": 29,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100006971",
          "name": "Syntree.SelectableElement.prototype.select",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.selected": "Syntree.SelectableElement#selected"
        }
      },
      "description": "Select the element.\nControls the appearance and behavior of <strong>this element only</strong>.\nDeselecting previously selected element and other overarching management is handled by Syntree.Page.",
      "see": [
        "Syntree.SelectableElement#isSelected",
        "Syntree.SelectableElement#selected",
        "Syntree.Page"
      ],
      "name": "select",
      "longname": "Syntree.Branch#select",
      "kind": "function",
      "memberof": "Syntree.Branch",
      "scope": "instance",
      "inherits": "Syntree.SelectableElement#select",
      "inherited": true,
      "___id": "T000002R001360",
      "___s": true
    },
    {
      "comment": "/**\n * Deselect the element.\n * Controls the appearance and behavior of <strong>this element only</strong>.\n * Other overarching management is handled by Syntree.Page.\n *\n * @see Syntree.SelectableElement#isSelected\n * @see Syntree.SelectableElement#selected\n * @see Syntree.Page\n */",
      "meta": {
        "range": [
          1503,
          1755
        ],
        "filename": "selectableElement.js",
        "lineno": 47,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100007019",
          "name": "Syntree.SelectableElement.prototype.deselect",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.selected": "Syntree.SelectableElement#selected"
        }
      },
      "description": "Deselect the element.\nControls the appearance and behavior of <strong>this element only</strong>.\nOther overarching management is handled by Syntree.Page.",
      "see": [
        "Syntree.SelectableElement#isSelected",
        "Syntree.SelectableElement#selected",
        "Syntree.Page"
      ],
      "name": "deselect",
      "longname": "Syntree.Branch#deselect",
      "kind": "function",
      "memberof": "Syntree.Branch",
      "scope": "instance",
      "inherits": "Syntree.SelectableElement#deselect",
      "inherited": true,
      "___id": "T000002R001361",
      "___s": true
    },
    {
      "comment": "/**\n     * Whether or not this element is selectable.\n     * Selectable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n     *\n     * @see Syntree.Element#isSelectable\n     */",
      "meta": {
        "range": [
          722,
          745
        ],
        "filename": "element.js",
        "lineno": 22,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003548",
          "name": "this.selectable",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Whether or not this element is selectable.\nSelectable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.",
      "see": [
        "Syntree.Element#isSelectable"
      ],
      "name": "selectable",
      "longname": "Syntree.Node#selectable",
      "kind": "member",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "inherits": "Syntree.Element#selectable",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#selectable",
      "___id": "T000002R001362",
      "___s": true
    },
    {
      "comment": "/**\n     * Whether or not this element has been deleted.\n     * Needed to avoid double deletion.\n     *\n     * @type {boolean}\n     */",
      "meta": {
        "range": [
          891,
          911
        ],
        "filename": "element.js",
        "lineno": 30,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003554",
          "name": "this.deleted",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Whether or not this element has been deleted.\nNeeded to avoid double deletion.",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "deleted",
      "longname": "Syntree.Node#deleted",
      "kind": "member",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "inherits": "Syntree.Element#deleted",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#deleted",
      "___id": "T000002R001363",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property deleted.\n *\n * @returns {boolean} whether or not the element is deleted\n * @see Syntree.Element.deleted;\n */",
      "meta": {
        "range": [
          1221,
          1298
        ],
        "filename": "element.js",
        "lineno": 45,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003575",
          "name": "Syntree.Element.prototype.isDeleted",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property deleted.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "whether or not the element is deleted"
        }
      ],
      "see": [
        "Syntree.Element.deleted;"
      ],
      "name": "isDeleted",
      "longname": "Syntree.Node#isDeleted",
      "kind": "function",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "inherits": "Syntree.Element#isDeleted",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#isDeleted",
      "___id": "T000002R001364",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property selectable.\n *\n * @returns {boolean} whether or not the element is selectable\n * @see Syntree.Element#selectable\n */",
      "meta": {
        "range": [
          1455,
          1538
        ],
        "filename": "element.js",
        "lineno": 55,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003590",
          "name": "Syntree.Element.prototype.isSelectable",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property selectable.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "whether or not the element is selectable"
        }
      ],
      "see": [
        "Syntree.Element#selectable"
      ],
      "name": "isSelectable",
      "longname": "Syntree.Node#isSelectable",
      "kind": "function",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "inherits": "Syntree.Element#isSelectable",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#isSelectable",
      "___id": "T000002R001365",
      "___s": true
    },
    {
      "comment": "/**\n * Delete the element.\n * Removes graphical elements, deregisters from Syntree.Workspace.page, and sets deleted property to true.\n * Extend in sub-classes with '__delete()'.\n *\n * @see Syntree.Element#deleted\n * @see Syntree.Element#isDeleted\n */",
      "meta": {
        "range": [
          1831,
          2114
        ],
        "filename": "element.js",
        "lineno": 68,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003605",
          "name": "Syntree.Element.prototype.delete",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.deleted": "Syntree.Element#deleted"
        }
      },
      "description": "Delete the element.\nRemoves graphical elements, deregisters from Syntree.Workspace.page, and sets deleted property to true.\nExtend in sub-classes with '__delete()'.",
      "see": [
        "Syntree.Element#deleted",
        "Syntree.Element#isDeleted"
      ],
      "name": "delete",
      "longname": "Syntree.Node#delete",
      "kind": "function",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "inherits": "Syntree.Element#delete",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#delete",
      "___id": "T000002R001366",
      "___s": true
    },
    {
      "comment": "/**\n * Update the elements graphical representation.\n * Mostly serves as a wrapper for Syntree.Graphic.update.\n * Extend in sub-classes with '__updateGraphics()'.\n *\n * @see Syntree.Graphic\n */",
      "meta": {
        "range": [
          2310,
          2505
        ],
        "filename": "element.js",
        "lineno": 87,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003662",
          "name": "Syntree.Element.prototype.updateGraphics",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Update the elements graphical representation.\nMostly serves as a wrapper for Syntree.Graphic.update.\nExtend in sub-classes with '__updateGraphics()'.",
      "see": [
        "Syntree.Graphic"
      ],
      "name": "updateGraphics",
      "longname": "Syntree.Node#updateGraphics",
      "kind": "function",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "inherits": "Syntree.Element#updateGraphics",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#updateGraphics",
      "___id": "T000002R001367",
      "___s": true
    },
    {
      "comment": "/**\n * Whether or not this object is an element.\n * Elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n *\n * @returns {boolean}\n */",
      "meta": {
        "range": [
          2646,
          2715
        ],
        "filename": "element.js",
        "lineno": 100,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003698",
          "name": "Syntree.Element.prototype.isElement",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Whether or not this object is an element.\nElements are Syntree.Node, Syntree.Branch, Syntree.Arrow.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isElement",
      "longname": "Syntree.Node#isElement",
      "kind": "function",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "inherits": "Syntree.Element#isElement",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#isElement",
      "___id": "T000002R001368",
      "___s": true
    },
    {
      "comment": "/**\n * Whether or not this element is deletable.\n * Deletable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\n * Syntree.Branch should never be deletable directly by the user.\n * Branches should only be deleted automatically when their child node is deleted.\n *\n * @see Syntree.Node.__delete\n * @returns {boolean}\n */",
      "meta": {
        "range": [
          3045,
          3116
        ],
        "filename": "element.js",
        "lineno": 113,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003711",
          "name": "Syntree.Element.prototype.isDeletable",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Whether or not this element is deletable.\nDeletable elements are Syntree.Node, Syntree.Branch, Syntree.Arrow.\nSyntree.Branch should never be deletable directly by the user.\nBranches should only be deleted automatically when their child node is deleted.",
      "see": [
        "Syntree.Node.__delete"
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isDeletable",
      "longname": "Syntree.Node#isDeletable",
      "kind": "function",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "inherits": "Syntree.Element#isDeletable",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#isDeletable",
      "___id": "T000002R001369",
      "___s": true
    },
    {
      "comment": "/**\n * Accessor function for property id.\n * @returns {number} the id of the element\n * @see Syntree.Element.id\n */",
      "meta": {
        "range": [
          3234,
          3302
        ],
        "filename": "element.js",
        "lineno": 122,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100003724",
          "name": "Syntree.Element.prototype.getId",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Accessor function for property id.",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "the id of the element"
        }
      ],
      "see": [
        "Syntree.Element.id"
      ],
      "name": "getId",
      "longname": "Syntree.Node#getId",
      "kind": "function",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "inherits": "Syntree.Element#getId",
      "inherited": true,
      "overrides": "Syntree.SelectableElement#getId",
      "___id": "T000002R001370",
      "___s": true
    },
    {
      "comment": "/**\n     * Whether or not this element is selected.\n     *\n     * @type {boolean}\n     * @see Syntree.SelectableElement#isSelected\n     * @see Syntree.SelectableElement#select\n     */",
      "meta": {
        "range": [
          621,
          642
        ],
        "filename": "selectableElement.js",
        "lineno": 18,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100006965",
          "name": "this.selected",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Whether or not this element is selected.",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "see": [
        "Syntree.SelectableElement#isSelected",
        "Syntree.SelectableElement#select"
      ],
      "name": "selected",
      "longname": "Syntree.Node#selected",
      "kind": "member",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "inherits": "Syntree.SelectableElement#selected",
      "inherited": true,
      "___id": "T000002R001371",
      "___s": true
    },
    {
      "comment": "/**\n * Select the element.\n * Controls the appearance and behavior of <strong>this element only</strong>.\n * Deselecting previously selected element and other overarching management is handled by Syntree.Page.\n *\n * @see Syntree.SelectableElement#isSelected\n * @see Syntree.SelectableElement#selected\n * @see Syntree.Page\n */",
      "meta": {
        "range": [
          972,
          1217
        ],
        "filename": "selectableElement.js",
        "lineno": 29,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100006971",
          "name": "Syntree.SelectableElement.prototype.select",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.selected": "Syntree.SelectableElement#selected"
        }
      },
      "description": "Select the element.\nControls the appearance and behavior of <strong>this element only</strong>.\nDeselecting previously selected element and other overarching management is handled by Syntree.Page.",
      "see": [
        "Syntree.SelectableElement#isSelected",
        "Syntree.SelectableElement#selected",
        "Syntree.Page"
      ],
      "name": "select",
      "longname": "Syntree.Node#select",
      "kind": "function",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "inherits": "Syntree.SelectableElement#select",
      "inherited": true,
      "___id": "T000002R001372",
      "___s": true
    },
    {
      "comment": "/**\n * Deselect the element.\n * Controls the appearance and behavior of <strong>this element only</strong>.\n * Other overarching management is handled by Syntree.Page.\n *\n * @see Syntree.SelectableElement#isSelected\n * @see Syntree.SelectableElement#selected\n * @see Syntree.Page\n */",
      "meta": {
        "range": [
          1503,
          1755
        ],
        "filename": "selectableElement.js",
        "lineno": 47,
        "path": "/var/www/html/syntree/app/classes/elements",
        "code": {
          "id": "astnode100007019",
          "name": "Syntree.SelectableElement.prototype.deselect",
          "type": "FunctionExpression",
          "paramnames": []
        },
        "vars": {
          "this.selected": "Syntree.SelectableElement#selected"
        }
      },
      "description": "Deselect the element.\nControls the appearance and behavior of <strong>this element only</strong>.\nOther overarching management is handled by Syntree.Page.",
      "see": [
        "Syntree.SelectableElement#isSelected",
        "Syntree.SelectableElement#selected",
        "Syntree.Page"
      ],
      "name": "deselect",
      "longname": "Syntree.Node#deselect",
      "kind": "function",
      "memberof": "Syntree.Node",
      "scope": "instance",
      "inherits": "Syntree.SelectableElement#deselect",
      "inherited": true,
      "___id": "T000002R001373",
      "___s": true
    }
  ]
}